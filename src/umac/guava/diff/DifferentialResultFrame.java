/*
 * Copyright (C) 2017 mayurdivate
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package umac.guava.diff;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import umac.guava.IGV;
import umac.guava.IGVdataTrack;
import umac.guava.RunStatusJframe;

/**
 *
 * @author mayurdivate
 */
public class DifferentialResultFrame extends javax.swing.JFrame {

    /**
     * Creates new form DifferentialResultFrame
     */
    public DifferentialResultFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jOutputTabs = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSummary = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableDifferentialPeaks = new javax.swing.JTable();
        jPanelVolcanoPlot = new javax.swing.JPanel();
        jLabelVplot = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableGO = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTablePathway = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButtonOuputFolder = new javax.swing.JButton();
        jLabelGeneSearch = new javax.swing.JLabel();
        jTextFieldSerachKey = new javax.swing.JTextField();
        jButtonIGV = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jOutputTabs.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jOutputTabs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jOutputTabsMouseClicked(evt);
            }
        });

        jTableSummary.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTableSummary.setFont(new java.awt.Font("Andale Mono", 0, 14)); // NOI18N
        jTableSummary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parameter", "value"
            }
        ));
        jTableSummary.setRowHeight(25);
        jScrollPane1.setViewportView(jTableSummary);

        jOutputTabs.addTab("Summary", jScrollPane1);

        jTableDifferentialPeaks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Chromosome", "Start", "End", "log2(FC)", "Pvalue", "Regulation", "Gene Symbol", "Distance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableDifferentialPeaks.setShowGrid(false);
        jTableDifferentialPeaks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDifferentialPeaksMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableDifferentialPeaks);

        jOutputTabs.addTab("Differential Table", jScrollPane2);

        jPanelVolcanoPlot.setBackground(new java.awt.Color(255, 255, 255));
        jPanelVolcanoPlot.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanelVolcanoPlotLayout = new javax.swing.GroupLayout(jPanelVolcanoPlot);
        jPanelVolcanoPlot.setLayout(jPanelVolcanoPlotLayout);
        jPanelVolcanoPlotLayout.setHorizontalGroup(
            jPanelVolcanoPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVolcanoPlotLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jLabelVplot, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );
        jPanelVolcanoPlotLayout.setVerticalGroup(
            jPanelVolcanoPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelVolcanoPlotLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabelVplot, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jOutputTabs.addTab("Plot", jPanelVolcanoPlot);

        jTableGO.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GO ID", "GO Term", "Definition", "Ontology", "Pvalue", "GeneSymbol"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableGO);

        jOutputTabs.addTab("GO analysis", jScrollPane3);

        jTablePathway.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pathway", "Pvalue", "Kegg ID", "GeneSymbol"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTablePathway);

        jOutputTabs.addTab("Pathway Analysis", jScrollPane4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jOutputTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jOutputTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonOuputFolder.setText("Output Folder");
        jButtonOuputFolder.setPreferredSize(new java.awt.Dimension(150, 30));
        jButtonOuputFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOuputFolderActionPerformed(evt);
            }
        });

        jLabelGeneSearch.setText("Gene Symbol");
        jLabelGeneSearch.setPreferredSize(new java.awt.Dimension(81, 30));
        jLabelGeneSearch.setVisible(false);

        jTextFieldSerachKey.setEnabled(false);
        jTextFieldSerachKey.setPreferredSize(new java.awt.Dimension(14, 30));
        jTextFieldSerachKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSerachKeyKeyReleased(evt);
            }
        });

        jButtonIGV.setText("View in IGV");
        jButtonIGV.setEnabled(false);
        jButtonIGV.setPreferredSize(new java.awt.Dimension(114, 30));
        jButtonIGV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIGVActionPerformed(evt);
            }
        });

        jButton2.setText("Close");
        jButton2.setPreferredSize(new java.awt.Dimension(79, 30));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButtonOuputFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelGeneSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jTextFieldSerachKey, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jButtonIGV, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOuputFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelGeneSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldSerachKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonIGV, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonIGVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIGVActionPerformed
        
        String build = "hg19";
        
        if(jTableDifferentialPeaks.getSelectedRow() > -1){
            int rowIndex = jTableDifferentialPeaks.convertRowIndexToModel(jTableDifferentialPeaks.getSelectedRow());
            TableModel tableModel = jTableDifferentialPeaks.getModel();
            
            String chr = tableModel.getValueAt(rowIndex, 0).toString();
            int start = Integer.parseInt(tableModel.getValueAt(rowIndex, 1).toString());
            int end = Integer.parseInt(tableModel.getValueAt(rowIndex, 2).toString());
            int distance = 100;
            
            File[] tracks =  IGVdataTrack.getDifferentialTracks(DifferentialInputFrame1.dfInputList,build);
            tracks[tracks.length - 1] = DifferentialOutputFiles.getDifferentialOutputFiles(outputFolder).getControlTreatmentCommonPeakBed();
            
            
            IGV.genome = "hg19";
            IGV igv =  new IGV(tracks, chr, start, end, distance);
            
            Thread t1 = new Thread(igv);
            t1.start();
        }
        
        jButtonIGV.setEnabled(false);
    }//GEN-LAST:event_jButtonIGVActionPerformed

    private void jButtonOuputFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOuputFolderActionPerformed
        // TODO add your handling code here:
        try {
            Desktop desktop = Desktop.getDesktop();
            desktop.open(DifferentialOutputFiles.outFolder.getAbsoluteFile());
        } catch (IOException ex) {
            Logger.getLogger(RunStatusJframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonOuputFolderActionPerformed

    private void jTextFieldSerachKeyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSerachKeyKeyReleased
        jButtonIGV.setEnabled(false);
        String query =  jTextFieldSerachKey.getText().trim();
        filterTableEntries(query);
    }//GEN-LAST:event_jTextFieldSerachKeyKeyReleased

    private void jTableDifferentialPeaksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDifferentialPeaksMouseClicked
        // TODO add your handling code here:
        jButtonIGV.setEnabled(true);
        jTextFieldSerachKey.setEnabled(true);
        jTextFieldSerachKey.setEditable(true);
        
    }//GEN-LAST:event_jTableDifferentialPeaksMouseClicked

    private void jOutputTabsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jOutputTabsMouseClicked
        // TODO add your handling code here:
        
        if(jOutputTabs.getSelectedIndex()==1){
            jButtonIGV.setEnabled(true);
            jTextFieldSerachKey.setEnabled(true);
            jTextFieldSerachKey.setEditable(true);
            jLabelGeneSearch.setEnabled(true);
        }else{
            jButtonIGV.setEnabled(false);
            jTextFieldSerachKey.setEnabled(false);
            jTextFieldSerachKey.setEditable(false);
            jLabelGeneSearch.setEnabled(false);
        }
    }//GEN-LAST:event_jOutputTabsMouseClicked

    private void filterTableEntries(String query){
        
        int geneColumnIndex = 6;
        DefaultTableModel dfModel =  (DefaultTableModel) jTableDifferentialPeaks.getModel();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<DefaultTableModel>(dfModel);
        jTableDifferentialPeaks.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)"+query, geneColumnIndex));
        
    }
    
    public void displayVplot(File plot){
        ImageIcon imageIconVplot  = new ImageIcon(plot.getAbsolutePath());
        jLabelVplot.setIcon(imageIconVplot);
    }
    
    public boolean displayResultTable(File deseqResults){
        if(!deseqResults.exists()){
             return false;
        }

        ArrayList<DESeq2Result> resultList = DESeq2Result.getDESeq2ResultList(deseqResults);
        DefaultTableModel dfModel =  (DefaultTableModel) jTableDifferentialPeaks.getModel();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<DefaultTableModel>(dfModel);
        jTableDifferentialPeaks.setRowSorter(tableRowSorter);
        
               
        if(resultList.size() == 0){
            return false;
        }
        Object rowData[] = new Object[jTableDifferentialPeaks.getColumnCount()];
        for(int index=0; index < resultList.size(); index++){
            rowData[0] =  resultList.get(index).getChromosome();
            rowData[1] =  resultList.get(index).getStart();
            rowData[2] =  resultList.get(index).getEnd();
            
            NumberFormat formatter = new DecimalFormat("0.0000");
            rowData[3] = Double.parseDouble(formatter.format(resultList.get(index).getFoldchange()));
            
            formatter = new DecimalFormat("0.00E00");
            rowData[4] =  formatter.format(resultList.get(index).getPvalue());
            
            rowData[5] =  resultList.get(index).getRegulation();
            rowData[6] =  resultList.get(index).getGeneSymbol();
            rowData[7] =  resultList.get(index).getDistance();
            dfModel.addRow(rowData);
            
        }
        
        return true;
    
    }
    
    public boolean displayGO(File goResults){
     if(!goResults.exists()){
         return false;
     }   
     try{
        FileReader fr = new FileReader(goResults);
        BufferedReader br = new BufferedReader(fr);
        String line = br.readLine();
        
        DefaultTableModel dfModel = (DefaultTableModel) jTableGO.getModel();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<>(dfModel);
        jTableGO.setRowSorter(tableRowSorter);
        
        Object[] rowData = new Object[dfModel.getColumnCount()];
        HashMap<GeneOntology, GeneOntology> goHashMap = new HashMap<>();
        
        while((line = br.readLine()) != null){
            
            line = line.replaceAll("\"", "");
            String[] lineData = line.split("\t");
            
            double pvalue =  Double.parseDouble(lineData[5]);
            
            GeneOntology go = new GeneOntology(lineData[1], lineData[2], lineData[3], lineData[4], lineData[6],lineData[7], pvalue);

            if(!goHashMap.containsKey(go)){
                        goHashMap.put(go, go);
            }else{
                        goHashMap.get(go).addEntrezID(lineData[6]);
                        goHashMap.get(go).addGeneSymbol(lineData[7]);
            }
            
        }
        
        for(GeneOntology go : goHashMap.keySet()){
            rowData[0] = go.getGoID();
            rowData[1] = go.getGoTerm();
            rowData[2] = go.getGoDefination();
            rowData[3] = go.getGoCategory();
            
            NumberFormat formatter = new DecimalFormat("0.00E00");
            rowData[4] =  formatter.format(go.getPvalue());
                    
            
            rowData[5] = go.getGeneSymbols();
            dfModel.addRow(rowData);
        }
        
        
        return true;
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DifferentialResultFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DifferentialResultFrame.class.getName()).log(Level.SEVERE, null, ex);
        }catch(NumberFormatException ex){
            Logger.getLogger(DifferentialResultFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
     return false;
    }
    
    public boolean displayPathways(File pathwayResults){
         if(!pathwayResults.exists()){
             return false;
         }   
        
         try{
            FileReader fr = new FileReader(pathwayResults);
            BufferedReader br = new BufferedReader(fr);
            String line = br.readLine() ;

            DefaultTableModel dfModel = (DefaultTableModel) jTablePathway.getModel();
            TableRowSorter<DefaultTableModel>  rowSorter =  new TableRowSorter<>(dfModel);
            jTablePathway.setRowSorter(rowSorter);
            
            Object[] rowData = new Object[dfModel.getColumnCount()];
            HashMap<Pathway, Pathway> pathways = new HashMap<>();
        
             
                while((line = br.readLine()) != null){
                    line = line.replaceAll("\"", "");
                    String[] lineData = line.split("\t");
                    double pvalue =  Double.parseDouble(lineData[2]);
                    Pathway pathway =  new Pathway(lineData[1], lineData[3], pvalue, lineData[4],lineData[5]);
                    if(!pathways.containsKey(pathway)){
                        pathways.put(pathway, pathway);
                    }else{
                        pathways.get(pathway).addEntrezID(lineData[4]);
                        pathways.get(pathway).addGeneSymbol(lineData[5]);
                    }
                    
                    
                }
                
                for(Pathway p: pathways.keySet()){
                    
                    rowData[0] = p.getPathwayname();
                    NumberFormat formatter = new DecimalFormat("0.00E00");
                    rowData[1] =  formatter.format(p.getPvalue());
                    rowData[2] = p.getKeggID() ;
                    rowData[3] = p.getGeneSymbol();
                    
                    dfModel.addRow(rowData);
                }
            
                
            return true;
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DifferentialResultFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DifferentialResultFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return false;
        
    }
    
    
    void addSummary(GdiffInput input){
        DefaultTableModel dfModel =  (DefaultTableModel) jTableSummary.getModel();
        Object rowData[] = new Object[jTableSummary.getColumnCount()];
        
        rowData[0] = "Project Name";
        rowData[1] = ""+input.getProjectName();
        dfModel.addRow(rowData);

        rowData[0] = "Genome build";
        rowData[1] = ""+input.getGenomeBuild();
        dfModel.addRow(rowData);
        
        rowData[0] = "Analysis Method";
        rowData[1] = "DESeq2";
        dfModel.addRow(rowData);
        
        rowData[0] = "P value";
        rowData[1] = ""+input.getPvalue();
        dfModel.addRow(rowData);
        
        rowData[0] = "Fold change";
        rowData[1] = ""+input.getFoldChange();
        dfModel.addRow(rowData);
        
        rowData[0] = "Upstream";
        rowData[1] = ""+input.getUpstream();
        dfModel.addRow(rowData);

        rowData[0] = "Downstream";
        rowData[1] = ""+input.getDownstream();
        dfModel.addRow(rowData);
        
        for(int index=0; index < input.getDiffInputfiles().size(); index++){
        rowData[0] = ""+input.getDiffInputfiles().get(index).getCondition()+"_REP_"+input.getDiffInputfiles().get(index).getReplicateNumber();
        rowData[1] = ""+input.getDiffInputfiles().get(index).getDiifInputFile().getName();
        dfModel.addRow(rowData);
        }
    
        
        
    }
    
    static File outputFolder;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonIGV;
    private javax.swing.JButton jButtonOuputFolder;
    private javax.swing.JLabel jLabelGeneSearch;
    private javax.swing.JLabel jLabelVplot;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTabbedPane jOutputTabs;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelVolcanoPlot;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTableDifferentialPeaks;
    private javax.swing.JTable jTableGO;
    private javax.swing.JTable jTablePathway;
    private javax.swing.JTable jTableSummary;
    private javax.swing.JTextField jTextFieldSerachKey;
    // End of variables declaration//GEN-END:variables
}

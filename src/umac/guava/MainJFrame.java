/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template selectedFile, choose Tools | Templates
 * and open the template in the editor.
 */
package umac.guava;

import umac.guava.diff.DifferentialInputFrame1;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import umac.guava.genomeindexbuilder.GenomeIndexBuilderGUI;

/**
 *
 * @author mayurdivate
 */
public class MainJFrame extends javax.swing.JFrame {

    GuavaInput guavaInput = new GuavaInput();

    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelFastqInput = new javax.swing.JPanel();
        r1JButton = new javax.swing.JButton();
        r2JButton = new javax.swing.JButton();
        r1FastqTextField = new java.awt.TextField();
        r2FastqTextField = new java.awt.TextField();
        jPanelAlignmentParameters = new javax.swing.JPanel();
        insertSizeJLabel = new javax.swing.JLabel();
        inserSizeTextField = new javax.swing.JTextField();
        jLabelHitsQuality = new javax.swing.JLabel();
        jTextFieldBowtieIndex = new java.awt.TextField();
        jComboBoxGenome = new javax.swing.JComboBox<>();
        jLabelGenomeVersion = new javax.swing.JLabel();
        jComboBoxAligner = new javax.swing.JComboBox<>();
        jButtonBrowseIndex = new javax.swing.JButton();
        jTextFieldHitsQuality = new javax.swing.JTextField();
        jPanelStartAnalysis = new javax.swing.JPanel();
        startJButton = new javax.swing.JButton();
        resetJButton = new javax.swing.JButton();
        jPanelChromosomeFiltering = new javax.swing.JPanel();
        ramJLabel = new javax.swing.JLabel();
        ramJSpinner = new javax.swing.JSpinner();
        cpuJLabel = new javax.swing.JLabel();
        cpuJSpinner = new javax.swing.JSpinner();
        jButtonShowChromosomes = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        macs2Japnel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        macs2PqvalueComboBox = new javax.swing.JComboBox<>();
        valueTextField = new javax.swing.JTextField();
        outputDirTextField = new java.awt.TextField();
        outputDirJButton = new javax.swing.JButton();
        jLabelOrgName = new javax.swing.JLabel();
        jPanelCutadapt = new javax.swing.JPanel();
        errorRatejLabel = new javax.swing.JLabel();
        maxNs = new java.awt.TextField();
        adapterjLabel = new javax.swing.JLabel();
        maxNjLabel = new javax.swing.JLabel();
        minLenjLabel = new javax.swing.JLabel();
        nextraAdapterCheckBox = new javax.swing.JCheckBox();
        orjLabel = new javax.swing.JLabel();
        trimCheckBox = new javax.swing.JCheckBox();
        adapterSequenceTextfeild = new java.awt.TextField();
        errorRate = new java.awt.TextField();
        minLen = new java.awt.TextField();
        mainframeJMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemGuava = new javax.swing.JMenuItem();
        jMenuItemGdiff = new javax.swing.JMenuItem();
        jMenuItemGenomeIndexBuilder = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        aboutJMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        helpJMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GUAVA");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setResizable(false);

        jPanelFastqInput.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Input fastq reads", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Andale Mono", 0, 14))); // NOI18N
        jPanelFastqInput.setPreferredSize(new java.awt.Dimension(713, 126));

        r1JButton.setText("R1 fastq");
        r1JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r1JButtonActionPerformed(evt);
            }
        });

        r2JButton.setText("R2 fastq");
        r2JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r2JButtonActionPerformed(evt);
            }
        });

        r1FastqTextField.setEditable(false);
        r1FastqTextField.setText("/path/R1.fastq");

        r2FastqTextField.setEditable(false);
        r2FastqTextField.setText("/path/R2.fastq");

        javax.swing.GroupLayout jPanelFastqInputLayout = new javax.swing.GroupLayout(jPanelFastqInput);
        jPanelFastqInput.setLayout(jPanelFastqInputLayout);
        jPanelFastqInputLayout.setHorizontalGroup(
            jPanelFastqInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFastqInputLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanelFastqInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFastqInputLayout.createSequentialGroup()
                        .addComponent(r2JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r2FastqTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelFastqInputLayout.createSequentialGroup()
                        .addComponent(r1JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r1FastqTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );
        jPanelFastqInputLayout.setVerticalGroup(
            jPanelFastqInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFastqInputLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanelFastqInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r1FastqTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r1JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanelFastqInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r2JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r2FastqTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jPanelAlignmentParameters.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Alignment Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Andale Mono", 0, 14))); // NOI18N
        jPanelAlignmentParameters.setPreferredSize(new java.awt.Dimension(660, 155));

        insertSizeJLabel.setText("Maximum insert size");
        insertSizeJLabel.setToolTipText("recommended value is 2000.");

        inserSizeTextField.setText("2000");
        inserSizeTextField.setToolTipText("Only numbers");
        inserSizeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inserSizeTextFieldKeyTyped(evt);
            }
        });

        jLabelHitsQuality.setText("No. of genomic hits (m)");
        jLabelHitsQuality.setToolTipText("Higher mapping quality means less number of genomic hits.  If mapping quality is 30 then expected genomic hits ~1.");

        jTextFieldBowtieIndex.setEditable(false);
        jTextFieldBowtieIndex.setText("/path/bowtie1Index.ebwt");

        String[] genomes = Genome.getGenomeArray();
        jComboBoxGenome.setModel(new javax.swing.DefaultComboBoxModel<>(genomes));
        jComboBoxGenome.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jComboBoxGenome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxGenomeActionPerformed(evt);
            }
        });

        jLabelGenomeVersion.setText("Genome Assembly");

        jComboBoxAligner.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bowtie index", "Bowtie2 index"}));
        jComboBoxAligner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAlignerActionPerformed(evt);
            }
        });

        jButtonBrowseIndex.setText("browse");
        jButtonBrowseIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseIndexActionPerformed(evt);
            }
        });

        jTextFieldHitsQuality.setText("1");
        jTextFieldHitsQuality.setToolTipText("Only numbers");
        jTextFieldHitsQuality.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldHitsQualityKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelAlignmentParametersLayout = new javax.swing.GroupLayout(jPanelAlignmentParameters);
        jPanelAlignmentParameters.setLayout(jPanelAlignmentParametersLayout);
        jPanelAlignmentParametersLayout.setHorizontalGroup(
            jPanelAlignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAlignmentParametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAlignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxAligner, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(insertSizeJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(jPanelAlignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAlignmentParametersLayout.createSequentialGroup()
                        .addComponent(inserSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabelHitsQuality, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldHitsQuality, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelGenomeVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTextFieldBowtieIndex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAlignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxGenome, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );
        jPanelAlignmentParametersLayout.setVerticalGroup(
            jPanelAlignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAlignmentParametersLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanelAlignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldBowtieIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxAligner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanelAlignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAlignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelHitsQuality, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelGenomeVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxGenome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldHitsQuality, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAlignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(insertSizeJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inserSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );

        jButtonBrowseIndex.getAccessibleContext().setAccessibleName("jButtonBrowseIndex");

        jPanelStartAnalysis.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        startJButton.setText("Start Analysis");
        startJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startJButtonActionPerformed(evt);
            }
        });

        resetJButton.setText("Reset All");
        resetJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelStartAnalysisLayout = new javax.swing.GroupLayout(jPanelStartAnalysis);
        jPanelStartAnalysis.setLayout(jPanelStartAnalysisLayout);
        jPanelStartAnalysisLayout.setHorizontalGroup(
            jPanelStartAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStartAnalysisLayout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(startJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resetJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120))
        );
        jPanelStartAnalysisLayout.setVerticalGroup(
            jPanelStartAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStartAnalysisLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanelStartAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jPanelChromosomeFiltering.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Chromosome Filtering", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Andale Mono", 0, 14))); // NOI18N

        ramJLabel.setText("RAM ( GB )");

        ramJSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        cpuJLabel.setText("CPU units");

        cpuJSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jButtonShowChromosomes.setText("Show Chromosomes");
        jButtonShowChromosomes.setToolTipText("it is recommended to fillter mitochondrial reads");
        jButtonShowChromosomes.setEnabled(false);
        jButtonShowChromosomes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowChromosomesActionPerformed(evt);
            }
        });

        jLabel1.setText("Select chromosomes:");
        jLabel1.setToolTipText("it is recommended to fillter mitochondrial reads");

        javax.swing.GroupLayout jPanelChromosomeFilteringLayout = new javax.swing.GroupLayout(jPanelChromosomeFiltering);
        jPanelChromosomeFiltering.setLayout(jPanelChromosomeFilteringLayout);
        jPanelChromosomeFilteringLayout.setHorizontalGroup(
            jPanelChromosomeFilteringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChromosomeFilteringLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jButtonShowChromosomes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ramJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ramJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(cpuJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpuJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jPanelChromosomeFilteringLayout.setVerticalGroup(
            jPanelChromosomeFilteringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChromosomeFilteringLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanelChromosomeFilteringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChromosomeFilteringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cpuJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cpuJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChromosomeFilteringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ramJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ramJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonShowChromosomes, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4))
        );

        macs2Japnel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Peak Calling and other parameters", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Andale Mono", 0, 14))); // NOI18N

        jLabel8.setText("Organism :");

        macs2PqvalueComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "q value", "p value" }));

        valueTextField.setText("0.05");
        valueTextField.setToolTipText("should be only numbers and 0 < num > 0.05");
        valueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueTextFieldActionPerformed(evt);
            }
        });
        valueTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                valueTextFieldKeyTyped(evt);
            }
        });

        outputDirTextField.setEditable(false);
        outputDirTextField.setText("/path/output_dir");

        outputDirJButton.setText("Output Folder");
        outputDirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputDirJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout macs2JapnelLayout = new javax.swing.GroupLayout(macs2Japnel);
        macs2Japnel.setLayout(macs2JapnelLayout);
        macs2JapnelLayout.setHorizontalGroup(
            macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(macs2JapnelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(macs2JapnelLayout.createSequentialGroup()
                        .addComponent(macs2PqvalueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(206, 206, 206)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelOrgName, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(macs2JapnelLayout.createSequentialGroup()
                        .addComponent(outputDirJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outputDirTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        macs2JapnelLayout.setVerticalGroup(
            macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(macs2JapnelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(macs2PqvalueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(valueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelOrgName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addGroup(macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputDirJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jPanelCutadapt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Adapter Trimming", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Andale Mono", 0, 13))); // NOI18N

        errorRatejLabel.setText("Error Rate");
        errorRatejLabel.setEnabled(false);

        maxNs.setEnabled(false);
        maxNs.setText("2");
        maxNs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maxNsKeyTyped(evt);
            }
        });

        adapterjLabel.setText("Adapter Sequence");
        adapterjLabel.setEnabled(false);

        maxNjLabel.setText("Maximum Ns ");
        maxNjLabel.setToolTipText("number of Ns in the read = number mismatches in the alignment.  Therefore low Ns = higher alignment rate");
        maxNjLabel.setEnabled(false);

        minLenjLabel.setText("Minimum Read length");
        minLenjLabel.setEnabled(false);

        nextraAdapterCheckBox.setSelected(true);
        nextraAdapterCheckBox.setText("Nextera XT Adapter");
        nextraAdapterCheckBox.setEnabled(false);
        nextraAdapterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextraAdapterCheckBoxActionPerformed(evt);
            }
        });

        orjLabel.setText("OR");
        orjLabel.setEnabled(false);

        trimCheckBox.setSelected(false);
        trimCheckBox.setText("Trim adapter  ?");
        trimCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trimCheckBoxActionPerformed(evt);
            }
        });

        adapterSequenceTextfeild.setEnabled(false);
        adapterSequenceTextfeild.setText("");
        adapterSequenceTextfeild.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                adapterSequenceTextfeildKeyReleased(evt);
            }
        });

        errorRate.setEnabled(false);
        errorRate.setText("0.1");
        errorRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                errorRateKeyTyped(evt);
            }
        });

        minLen.setEnabled(false);
        minLen.setText("30");
        minLen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                minLenKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelCutadaptLayout = new javax.swing.GroupLayout(jPanelCutadapt);
        jPanelCutadapt.setLayout(jPanelCutadaptLayout);
        jPanelCutadaptLayout.setHorizontalGroup(
            jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCutadaptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCutadaptLayout.createSequentialGroup()
                        .addComponent(nextraAdapterCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(orjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(adapterjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(adapterSequenceTextfeild, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelCutadaptLayout.createSequentialGroup()
                        .addComponent(trimCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(maxNjLabel)
                        .addGap(0, 0, 0)
                        .addComponent(maxNs, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(minLenjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(minLen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(errorRatejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(errorRate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );
        jPanelCutadaptLayout.setVerticalGroup(
            jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCutadaptLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(trimCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maxNjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(maxNs, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorRate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minLen, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorRatejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minLenjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nextraAdapterCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(orjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(adapterjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(adapterSequenceTextfeild, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jMenu1.setText("Tools");

        jMenuItemGuava.setText("GUAVA");
        jMenuItemGuava.setEnabled(false);
        jMenu1.add(jMenuItemGuava);

        jMenuItemGdiff.setText("Differential Analysis");
        jMenuItemGdiff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGdiffActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemGdiff);

        jMenuItemGenomeIndexBuilder.setText("Genome Index Builder");
        jMenuItemGenomeIndexBuilder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGenomeIndexBuilderActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemGenomeIndexBuilder);
        jMenu1.add(jSeparator1);

        jMenuItem5.setText("Close");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        mainframeJMenuBar.add(jMenu1);

        aboutJMenu.setText("About");

        jMenuItem1.setText("Prof. Edwin Cheung's lab,\nUniversity of Macau, All rights reserved");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        aboutJMenu.add(jMenuItem1);

        mainframeJMenuBar.add(aboutJMenu);

        helpJMenu.setText("Help");

        jMenuItem2.setText("Mannual");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        helpJMenu.add(jMenuItem2);

        mainframeJMenuBar.add(helpJMenu);

        setJMenuBar(mainframeJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelAlignmentParameters, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                    .addComponent(jPanelCutadapt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelFastqInput, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                    .addComponent(jPanelChromosomeFiltering, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(macs2Japnel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelStartAnalysis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanelFastqInput, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelCutadapt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelAlignmentParameters, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelChromosomeFiltering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(macs2Japnel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelStartAnalysis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        setSize(new java.awt.Dimension(716, 589));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private static FileNameExtensionFilter getFastqFileNameExtensionFilter() {
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("Fastq File", "fastq", "fq", "gz");
        fileNameExtensionFilter.getExtensions();
        return fileNameExtensionFilter;
    }

    private static boolean isFastqGzFile(File f) {
        String fileName = f.getName();
        String fqGz = "fastq.gz";
        String fastqGz = "fastq.gz";

        if (!fileName.endsWith("gz")) {
            return true;
        }

        if (fileName.endsWith(fastqGz)) {
            return true;
        } else if (fileName.endsWith(fqGz)) {
            return true;
        }

        return false;
    }

    private void r1JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r1JButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser r1FileChooser = new JFileChooser();
        r1FileChooser.setAcceptAllFileFilterUsed(false);
        r1FileChooser.addChoosableFileFilter(getFastqFileNameExtensionFilter()); // Add fastq selectedFile filter
        r1FileChooser.setDialogTitle("Select R1 Fastq");

        if (lastpath != null) {
            r1FileChooser.setCurrentDirectory(lastpath);
        }

        int returnVal = r1FileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File r1File = r1FileChooser.getSelectedFile();
            String r1FileName = r1File.getAbsolutePath();
            if (isFastqGzFile(r1File)) {
                r1FastqTextField.setText(r1FileName);
                guavaInput.setR1Fastq(r1FileName);
                r1FastqTextField.setForeground(Color.BLACK);
                lastpath = r1File.getParentFile();
            }
        }

    }//GEN-LAST:event_r1JButtonActionPerformed

    private void r2JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r2JButtonActionPerformed
        JFileChooser r2FileChooser = new JFileChooser();
        r2FileChooser.setAcceptAllFileFilterUsed(false);
        r2FileChooser.addChoosableFileFilter(getFastqFileNameExtensionFilter()); // Add fastq selectedFile filter
        r2FileChooser.setDialogTitle("Select R2 Fastq");

        if (lastpath != null) {
            r2FileChooser.setCurrentDirectory(lastpath);
        }

        int returnValue = r2FileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File r2File = r2FileChooser.getSelectedFile();
            String r2FileName = r2File.getAbsolutePath();
            if (isFastqGzFile(r2File)) {
                r2FastqTextField.setText(r2FileName);
                guavaInput.setR2Fastq(r2FileName);
                r2FastqTextField.setForeground(Color.BLACK);
                lastpath = r2File.getParentFile();
            }
        }
    }//GEN-LAST:event_r2JButtonActionPerformed

    private void inserSizeTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inserSizeTextFieldKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }


    }//GEN-LAST:event_inserSizeTextFieldKeyTyped

    private void outputDirJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputDirJButtonActionPerformed
        JFileChooser outputDirChooser = new JFileChooser();
        outputDirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (lastpath != null) {
            outputDirChooser.setCurrentDirectory(lastpath);
        }

        int returnVal = outputDirChooser.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File outputDir = outputDirChooser.getSelectedFile();
            String outputDirName = outputDir.getAbsolutePath();
            outputDirTextField.setText(outputDirName);
            guavaInput.setOutputFolder(outputDirName);
            outputDirTextField.setForeground(Color.BLACK);
            lastpath = outputDir.getParentFile();
        }
    }//GEN-LAST:event_outputDirJButtonActionPerformed

    private void resetJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJButtonActionPerformed
        r1FastqTextField.setText("/path/R1.fastq");
        r2FastqTextField.setText("/path/R2.fastq");
        jTextFieldBowtieIndex.setText("/path/bowtie1Index.ebwt");
        jComboBoxAligner.setSelectedIndex(0);
        jComboBoxGenome.setSelectedIndex(0);
        outputDirTextField.setText("/path/output_dir");
        inserSizeTextField.setText("2000");
        jLabelOrgName.setText("");
        macs2PqvalueComboBox.setSelectedIndex(0);
        resetShowChromosomesButton();
        jLabelOrgName.setText("");

        jTextFieldHitsQuality.setText("1");
        cpuJSpinner.setValue(1);
        valueTextField.setText("0.05");
        guavaInput = new GuavaInput();
        r1FastqTextField.setForeground(Color.black);
        r2FastqTextField.setForeground(Color.black);
        jTextFieldBowtieIndex.setForeground(Color.black);
        jLabelGenomeVersion.setForeground(Color.black);
        outputDirTextField.setForeground(Color.black);
        valueTextField.setForeground(Color.black);

        this.adapterSequenceTextfeild.setForeground(Color.BLACK);
        this.adapterSequenceTextfeild.setText("");
        this.adapterSequenceTextfeild.setEnabled(false);
        this.maxNs.setText("2");
        this.maxNs.setEnabled(false);
        this.maxNs.setForeground(Color.black);
        this.maxNjLabel.setEnabled(false);
        this.minLen.setText("30");
        this.minLen.setEnabled(false);
        this.minLen.setForeground(Color.black);
        this.minLenjLabel.setEnabled(false);
        this.errorRate.setText("0.1");
        this.errorRate.setEnabled(false);
        this.errorRatejLabel.setEnabled(false);
        this.errorRate.setForeground(Color.black);

        this.nextraAdapterCheckBox.setSelected(true);
        this.nextraAdapterCheckBox.setEnabled(false);
        this.trimCheckBox.setSelected(false);

    }//GEN-LAST:event_resetJButtonActionPerformed

    private void startJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startJButtonActionPerformed
        //complete Input object construction
        
        Genome genomeObj =  Genome.getGenomeObject(jComboBoxGenome.getItemAt(jComboBoxGenome.getSelectedIndex()));
        String aligner = "bowtie2";
        if(AnalysisWorkflow.bowtie){
            aligner = "bowtie";
        }
        
        guavaInput.setBowtieIndex(jTextFieldBowtieIndex.getText());
        guavaInput.setAligner(aligner);
        guavaInput.setCpu_units((int) cpuJSpinner.getValue());
        guavaInput.setMaxGenomicHits(Integer.parseInt(jTextFieldHitsQuality.getText()));
        guavaInput.setInsertSize(Integer.parseInt(inserSizeTextField.getText()));
        
        guavaInput.setPqString(macs2PqvalueComboBox.getSelectedItem().toString());
        guavaInput.setChromosome(getSelectedChromosomes());
        guavaInput.setCutOff(valueTextField.getText());
        
        guavaInput.setGenome(jComboBoxGenome.getSelectedItem().toString());
        guavaInput.setOrganism(genomeObj.getOrganismName());
        guavaInput.setGenomeObject(genomeObj);
        
        boolean disposeFlag = validateInput(guavaInput);
        boolean isTrimValid = true;
        
        if (this.trimCheckBox.isSelected()) {
            isTrimValid = this.validateTrimmingParameters();
            if (isTrimValid) {
                guavaInput.setTrim(true);
                int nCount = Integer.parseInt(this.maxNs.getText());
                int minLenValue = Integer.parseInt(this.minLen.getText());
                double errorRateValue = Double.parseDouble(this.errorRate.getText());
                
                Cutadapt cutadapt = Cutadapt.getCutadapt(guavaInput, getAdapterSequence(), errorRateValue, nCount, minLenValue);
                guavaInput.setCutadapt(cutadapt);
            }
        }

        // set genome for IGV before starting analysis workflow
        if (isTrimValid && disposeFlag) {
            IGV.genome = jComboBoxGenome.getSelectedItem().toString();
            this.setVisible(false);
            AnalysisWorkflow analysisWorkflow = new AnalysisWorkflow();
            analysisWorkflow.startGUIGuavaAnalysis(guavaInput);
        }
    }//GEN-LAST:event_startJButtonActionPerformed

    private String getAdapterSequence() {
        if (this.nextraAdapterCheckBox.isSelected()) {
            return "CTGTCTCTTATACACATCT";
        } else {
            return this.adapterSequenceTextfeild.getText();
        }

    }

    private String getSelectedChromosomes() {
        if(isCustomChromosomesSelected){
            return getCustomChromosomeString();
        }
        return "";
    }

    private String getCustomChromosomeString(){
            String customChrString = "";
            for(int i=0; i < customChromosomes.getCustomChrList().size(); i++){
                customChrString = customChrString +" "+ customChromosomes.getCustomChrList().get(i);
            }
            return customChrString.trim();
    }

    private boolean validateInput(GuavaInput runATACseq) {
        Boolean disposeFlag = true;

        if (runATACseq.getR1Fastq() == null || !(runATACseq.getR1Fastq().exists())) {
            disposeFlag = false;
            r1FastqTextField.setForeground(Color.red);
        }
        if (runATACseq.getR2Fastq() == null || !(runATACseq.getR2Fastq().exists())) {
            disposeFlag = false;
            r2FastqTextField.setForeground(Color.red);
        }
        if (runATACseq.getBowtieIndex() == null || !(runATACseq.getBowtieIndex().exists())) {
            disposeFlag = false;
            jTextFieldBowtieIndex.setForeground(Color.red);
        }
        if (runATACseq.getGenome() == null || runATACseq.getGenome().equals("-select-")) {
            disposeFlag = false;
            jLabelGenomeVersion.setForeground(Color.red);
        }
        if (runATACseq.getOutputFolder() == null || !(runATACseq.getOutputFolder().exists())) {
            disposeFlag = false;
            outputDirTextField.setForeground(Color.red);
        }
        if (valueTextField.getText().equals("") || !runATACseq.getCutOff().equals("")) {

            if (valueTextField.getText().equals("")) {
                disposeFlag = false;
                valueTextField.setText("NULL");
                valueTextField.setForeground(Color.red);
                return disposeFlag;
            }

            try {
                Double.parseDouble(valueTextField.getText());
                valueTextField.setForeground(Color.BLACK);
            } catch (NumberFormatException e) {
                disposeFlag = false;
                valueTextField.setForeground(Color.red);
            }

        }

        return disposeFlag;
    }

    private boolean validateTrimmingParameters() {
        boolean validationflag = true;

        if (!nextraAdapterCheckBox.isSelected() && adapterSequenceTextfeild.getText().equals("")) {
            adapterSequenceTextfeild.setText("Please provide adapter sequence");
            adapterSequenceTextfeild.setForeground(Color.red);
            validationflag = false;
        }

        if (!nextraAdapterCheckBox.isSelected() && !adapterSequenceTextfeild.getText().equals("")) {
            String adapterSeq = adapterSequenceTextfeild.getText();
            Pattern nonNucleotideSeq = Pattern.compile("^[^ATGC]+$");
            Matcher matchNonNucleotide = nonNucleotideSeq.matcher(adapterSeq);
            if (matchNonNucleotide.find()) {
                adapterSequenceTextfeild.setForeground(Color.red);
                validationflag = false;

            }
        }

        String minLen = this.minLen.getText();
        String maxN = this.maxNs.getText();
        String errorRate = this.errorRate.getText();

        if (!checkNumberFormat(minLen)) {
            this.maxNs.setForeground(Color.red);
            validationflag = false;
        }
        if (!checkNumberFormat(maxN)) {
            this.maxNs.setForeground(Color.red);
            validationflag = false;
        }
        if (!checkDoubleNumber(errorRate)) {
            this.errorRate.setForeground(Color.red);
            validationflag = false;
        }

        return validationflag;
    }

    private boolean checkDoubleNumber(String numberText) {
        if (!numberText.equals("")) {
            try {
                double doubleNumber = Double.parseDouble(numberText);
                double zero = 0.0;
                double one = 1.0;
                if (zero > doubleNumber || doubleNumber >= 0.5) {
                    return false;
                }
            } catch (NumberFormatException e) {
                return false;
            }

            return true;
        }
        return false;
    }

    private boolean checkNumberFormat(String numberText) {
        if (!numberText.equals("")) {
            try {
                int intNumber = Integer.parseInt(numberText);
                if (intNumber < 1) {
                    return false;
                }
            } catch (NumberFormatException e) {
                return false;
            }

            return true;
        }
        return false;
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            File jarFile = GUAVA.getPackageBase();
            File manual = new File(jarFile, "GUAVA_Manual.pdf");
            if (manual.exists()) {
                if (Desktop.isDesktopSupported()) {
                    Desktop.getDesktop().open(manual);
                } else {
                    System.out.println("Desktop is not supported");
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void valueTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valueTextFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_valueTextFieldKeyTyped

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jComboBoxGenomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxGenomeActionPerformed
        // TODO add your handling code here:
        jLabelGenomeVersion.setForeground(Color.black);
        if (jComboBoxGenome.getSelectedIndex() > 0) {
            String orgNameCode = jComboBoxGenome.getItemAt(jComboBoxGenome.getSelectedIndex());
            Genome genome =  Genome.getGenomeObject(orgNameCode);
            jLabelOrgName.setText(genome.getOrganismName());
        }

    }//GEN-LAST:event_jComboBoxGenomeActionPerformed

    private void nextraAdapterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextraAdapterCheckBoxActionPerformed
        // TODO add your handling code here:
        if (nextraAdapterCheckBox.isSelected()) {
            adapterSequenceTextfeild.setEnabled(false);
            adapterjLabel.setEnabled(false);
        }
        if (!nextraAdapterCheckBox.isSelected()) {
            adapterSequenceTextfeild.setEnabled(true);
            adapterjLabel.setEnabled(true);
        }

    }//GEN-LAST:event_nextraAdapterCheckBoxActionPerformed

    private void trimCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trimCheckBoxActionPerformed
        // TODO add your handling code here:
        if (trimCheckBox.isSelected()) {
            maxNs.setEnabled(true);
            maxNjLabel.setEnabled(true);
            minLen.setEnabled(true);
            minLenjLabel.setEnabled(true);
            errorRate.setEnabled(true);
            errorRatejLabel.setEnabled(true);
            nextraAdapterCheckBox.setEnabled(true);
            orjLabel.setEnabled(true);
            if (nextraAdapterCheckBox.isSelected()) {
                adapterSequenceTextfeild.setEnabled(false);
                adapterjLabel.setEnabled(false);
            } else if (!nextraAdapterCheckBox.isSelected()) {
                adapterSequenceTextfeild.setEnabled(true);
                adapterjLabel.setEnabled(true);
            }

        }
        if (!trimCheckBox.isSelected()) {
            maxNs.setEnabled(false);
            maxNjLabel.setEnabled(false);
            minLen.setEnabled(false);
            minLenjLabel.setEnabled(false);
            errorRate.setEnabled(false);
            errorRatejLabel.setEnabled(false);
            nextraAdapterCheckBox.setEnabled(false);
            adapterSequenceTextfeild.setEnabled(false);
            adapterjLabel.setEnabled(false);
            orjLabel.setEnabled(false);

        }

    }//GEN-LAST:event_trimCheckBoxActionPerformed

    private void minLenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minLenKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (!(Character.isDigit(key))) {
            evt.consume();
        }
    }//GEN-LAST:event_minLenKeyTyped

    private void maxNsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxNsKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (!(Character.isDigit(key))) {
            evt.consume();
        }
    }//GEN-LAST:event_maxNsKeyTyped

    private void errorRateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_errorRateKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (!(Character.isDigit(key) || key == '.')) {
            evt.consume();
        }
    }//GEN-LAST:event_errorRateKeyTyped

    private void adapterSequenceTextfeildKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_adapterSequenceTextfeildKeyReleased
        // TODO add your handling code here:
        adapterSequenceTextfeild.setText(adapterSequenceTextfeild.getText().toUpperCase());

    }//GEN-LAST:event_adapterSequenceTextfeildKeyReleased

    private void jMenuItemGdiffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGdiffActionPerformed
        // TODO add your handling code here:
        this.dispose();
        DifferentialInputFrame1 dfInputFrame = new DifferentialInputFrame1();
        dfInputFrame.setVisible(true);
    }//GEN-LAST:event_jMenuItemGdiffActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jComboBoxAlignerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAlignerActionPerformed
        // TODO add your handling code here:
        if (jComboBoxAligner.getSelectedIndex() == 0) {
            jLabelHitsQuality.setText("No. of genomic hits (m)");
            jTextFieldHitsQuality.setText("1");
            jTextFieldBowtieIndex.setText("/path/bowtie1index.ebwt");
            AnalysisWorkflow.bowtie = true;
        } else {
            jLabelHitsQuality.setText("Minimum Mapping Quality");
            jTextFieldHitsQuality.setText("30");
            jTextFieldBowtieIndex.setText("/path/bowtie1index.bt2");
            AnalysisWorkflow.bowtie = false;

        }

        // index type changed so reset CustomChr Button
        isIndexChanged = true;
        resetShowChromosomesButton();
    }//GEN-LAST:event_jComboBoxAlignerActionPerformed

    private void jTextFieldHitsQualityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldHitsQualityKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldHitsQualityKeyTyped

    private void jButtonBrowseIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseIndexActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter fileNameExtensionFilter = getIndexFileNameFiler();
        fileChooser.addChoosableFileFilter(fileNameExtensionFilter);

        if (jComboBoxAligner.getSelectedIndex() == 0) {

            fileChooser.setDialogTitle("Select Bowtie v1 index");
            if (lastpath != null) {
                fileChooser.setCurrentDirectory(lastpath);
            }

            int returnVal = fileChooser.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                setIndexbyBrowseButtonFile(fileChooser.getSelectedFile());
            }

        } else if (jComboBoxAligner.getSelectedIndex() == 1) {
            fileChooser.setDialogTitle("Select Bowtie2 index");
            if (lastpath != null) {
                fileChooser.setCurrentDirectory(lastpath);
            }

            int returnVal = fileChooser.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                setIndexbyBrowseButtonFile(fileChooser.getSelectedFile());
            }
        }


    }//GEN-LAST:event_jButtonBrowseIndexActionPerformed

    FileNameExtensionFilter getIndexFileNameFiler() {

        if (jComboBoxAligner.getSelectedIndex() == 0) {
            return new FileNameExtensionFilter("bowtie v1 index", "ebwt");
        } else if (jComboBoxAligner.getSelectedIndex() == 1) {
            return new FileNameExtensionFilter("bowtie2 index", "bt2");
        }
        return null;
    }

    void setIndexbyBrowseButtonFile(File selectedFile) {
        String fileName = selectedFile.getAbsolutePath();
        jTextFieldBowtieIndex.setText(fileName);
        jTextFieldBowtieIndex.setForeground(Color.BLACK);
        lastpath = selectedFile.getParentFile();
        
        
        jButtonShowChromosomes.setEnabled(true);
        setCustomChrSelected(false);
        isIndexChanged = true;
    }

    private void jButtonShowChromosomesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowChromosomesActionPerformed
        // TODO add your handling code here:
        // open a text editor to accept custom chr

        ChrGenerator chrGenerator = new ChrGenerator();
        String indexPath = jTextFieldBowtieIndex.getText();

        if (isIndexChanged) {
            if (jComboBoxAligner.getSelectedIndex() == 0) {
                List<String> chrList = chrGenerator.getBowtieIndexChromosomes(indexPath);
                customChromosomesFrame = new CustomChromosomesFrame();
                customChromosomesFrame.setVisible(true);
                customChromosomesFrame.setAlwaysOnTop(true);
                customChromosomesFrame.mainFrame.setEnabled(false);
                customChromosomesFrame.initializeChrList(chrList);

            } else if (jComboBoxAligner.getSelectedIndex() == 1) {
                List<String> chrList = chrGenerator.getBowtie2IndexChromosomes(indexPath);
                customChromosomesFrame = new CustomChromosomesFrame();
                customChromosomesFrame.setVisible(true);
                customChromosomesFrame.mainFrame.setEnabled(false);
                customChromosomesFrame.setAlwaysOnTop(true);
                customChromosomesFrame.initializeChrList(chrList);

            }
            isIndexChanged = false;
        } else {
            customChromosomesFrame.mainFrame.setEnabled(false);
            customChromosomesFrame.setVisible(true);
        }

    }//GEN-LAST:event_jButtonShowChromosomesActionPerformed

    private void valueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valueTextFieldActionPerformed

    private void jMenuItemGenomeIndexBuilderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGenomeIndexBuilderActionPerformed
        // TODO add your handling code here:
        this.dispose();
        GenomeIndexBuilderGUI genomeIndexBuilderGUI = new GenomeIndexBuilderGUI();
        genomeIndexBuilderGUI.setVisible(true);
    }//GEN-LAST:event_jMenuItemGenomeIndexBuilderActionPerformed

    void setCustomChrSelected(boolean isSelected) {
        if (isSelected) {
            isCustomChromosomesSelected = true;
            jButtonShowChromosomes.setForeground(new Color(0, 128, 0));
        } else {
            isCustomChromosomesSelected = false;
            jButtonShowChromosomes.setForeground(Color.black);
        }
    }
    
    void resetShowChromosomesButton() {
        setCustomChrSelected(false);
        jButtonShowChromosomes.setEnabled(false);
    }

    private File lastpath;
    public static boolean isIndexChanged = true;
           static CustomChromosomesFrame customChromosomesFrame;
    public static CustomChromosomes customChromosomes;
           static boolean isCustomChromosomesSelected = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutJMenu;
    private java.awt.TextField adapterSequenceTextfeild;
    private javax.swing.JLabel adapterjLabel;
    private javax.swing.JLabel cpuJLabel;
    private javax.swing.JSpinner cpuJSpinner;
    private java.awt.TextField errorRate;
    private javax.swing.JLabel errorRatejLabel;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JTextField inserSizeTextField;
    private javax.swing.JLabel insertSizeJLabel;
    private javax.swing.JButton jButtonBrowseIndex;
    private javax.swing.JButton jButtonShowChromosomes;
    private javax.swing.JComboBox<String> jComboBoxAligner;
    private javax.swing.JComboBox<String> jComboBoxGenome;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelGenomeVersion;
    private javax.swing.JLabel jLabelHitsQuality;
    private javax.swing.JLabel jLabelOrgName;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItemGdiff;
    private javax.swing.JMenuItem jMenuItemGenomeIndexBuilder;
    private javax.swing.JMenuItem jMenuItemGuava;
    private javax.swing.JPanel jPanelAlignmentParameters;
    private javax.swing.JPanel jPanelChromosomeFiltering;
    private javax.swing.JPanel jPanelCutadapt;
    private javax.swing.JPanel jPanelFastqInput;
    private javax.swing.JPanel jPanelStartAnalysis;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private java.awt.TextField jTextFieldBowtieIndex;
    private javax.swing.JTextField jTextFieldHitsQuality;
    private javax.swing.JPanel macs2Japnel;
    private javax.swing.JComboBox<String> macs2PqvalueComboBox;
    private javax.swing.JMenuBar mainframeJMenuBar;
    private javax.swing.JLabel maxNjLabel;
    private java.awt.TextField maxNs;
    private java.awt.TextField minLen;
    private javax.swing.JLabel minLenjLabel;
    private javax.swing.JCheckBox nextraAdapterCheckBox;
    private javax.swing.JLabel orjLabel;
    private javax.swing.JButton outputDirJButton;
    private java.awt.TextField outputDirTextField;
    private java.awt.TextField r1FastqTextField;
    private javax.swing.JButton r1JButton;
    private java.awt.TextField r2FastqTextField;
    private javax.swing.JButton r2JButton;
    private javax.swing.JLabel ramJLabel;
    private javax.swing.JSpinner ramJSpinner;
    private javax.swing.JButton resetJButton;
    private javax.swing.JButton startJButton;
    private javax.swing.JCheckBox trimCheckBox;
    private javax.swing.JTextField valueTextField;
    // End of variables declaration//GEN-END:variables
}

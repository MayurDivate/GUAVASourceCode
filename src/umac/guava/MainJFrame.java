/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package umac.guava;

import umac.guava.diff.DifferentialInputFrame1;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author mayurdivate
 */
public class MainJFrame extends javax.swing.JFrame {

    GuavaInput runATACseq = new GuavaInput();
    
    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        r1JButton = new javax.swing.JButton();
        r2JButton = new javax.swing.JButton();
        r1FastqTextField = new java.awt.TextField();
        r2FastqTextField = new java.awt.TextField();
        jPanel2 = new javax.swing.JPanel();
        insertSizeJLabel = new javax.swing.JLabel();
        inserSizeTextField = new javax.swing.JTextField();
        jLabelHitsQuality = new javax.swing.JLabel();
        jTextFieldBowtieIndex = new java.awt.TextField();
        jComboBoxGenome = new javax.swing.JComboBox<>();
        jLabelGenomeVersion = new javax.swing.JLabel();
        jComboBoxAligner = new javax.swing.JComboBox<>();
        jButtonBrowseIndex = new javax.swing.JButton();
        jTextFieldHitsQuality = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        startJButton = new javax.swing.JButton();
        resetJButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        chrMCheckBox = new javax.swing.JCheckBox();
        chrYCheckBox = new javax.swing.JCheckBox();
        ramJLabel = new javax.swing.JLabel();
        ramJSpinner = new javax.swing.JSpinner();
        cpuJLabel = new javax.swing.JLabel();
        cpuJSpinner = new javax.swing.JSpinner();
        macs2Japnel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        macs2PqvalueComboBox = new javax.swing.JComboBox<>();
        valueTextField = new javax.swing.JTextField();
        outputDirJButton = new javax.swing.JButton();
        outputDirTextField = new java.awt.TextField();
        jLabelOrgName = new javax.swing.JLabel();
        jPanelCutadapt = new javax.swing.JPanel();
        errorRatejLabel = new javax.swing.JLabel();
        maxNs = new java.awt.TextField();
        adapterjLabel = new javax.swing.JLabel();
        maxNjLabel = new javax.swing.JLabel();
        minLenjLabel = new javax.swing.JLabel();
        nextraAdapterCheckBox = new javax.swing.JCheckBox();
        orjLabel = new javax.swing.JLabel();
        trimCheckBox = new javax.swing.JCheckBox();
        adapterSequenceTextfeild = new java.awt.TextField();
        errorRate = new java.awt.TextField();
        minLen = new java.awt.TextField();
        mainframeJMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        aboutJMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        helpJMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GUAVA");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Input fastq reads", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Andale Mono", 0, 14))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(713, 126));

        r1JButton.setText("R1 fastq");
        r1JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r1JButtonActionPerformed(evt);
            }
        });

        r2JButton.setText("R2 fastq");
        r2JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r2JButtonActionPerformed(evt);
            }
        });

        r1FastqTextField.setEditable(false);
        r1FastqTextField.setText("/path/R1.fastq");

        r2FastqTextField.setEditable(false);
        r2FastqTextField.setText("/path/R2.fastq");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(r2JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r2FastqTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(r1JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r1FastqTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r1FastqTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r1JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r2JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r2FastqTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Alignment Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Andale Mono", 0, 14))); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(660, 155));

        insertSizeJLabel.setText("Maximum insert size");

        inserSizeTextField.setText("2000");
        inserSizeTextField.setToolTipText("Only numbers");
        inserSizeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserSizeTextFieldActionPerformed(evt);
            }
        });
        inserSizeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inserSizeTextFieldKeyTyped(evt);
            }
        });

        jLabelHitsQuality.setText("No. of genomic hits (m)");

        jTextFieldBowtieIndex.setEditable(false);
        jTextFieldBowtieIndex.setText("/path/bowtie1Index.ebwt");
        jTextFieldBowtieIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBowtieIndexActionPerformed(evt);
            }
        });

        jComboBoxGenome.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-select-","hg19", "mm10", "mm9"}));
        jComboBoxGenome.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jComboBoxGenome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxGenomeActionPerformed(evt);
            }
        });

        jLabelGenomeVersion.setText("Genome Assembly");

        jComboBoxAligner.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bowtie index", "Bowtie2 index"}));
        jComboBoxAligner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAlignerActionPerformed(evt);
            }
        });

        jButtonBrowseIndex.setText("browse");
        jButtonBrowseIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseIndexActionPerformed(evt);
            }
        });

        jTextFieldHitsQuality.setText("1");
        jTextFieldHitsQuality.setToolTipText("Only numbers");
        jTextFieldHitsQuality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldHitsQualityActionPerformed(evt);
            }
        });
        jTextFieldHitsQuality.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldHitsQualityKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxAligner, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(insertSizeJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(inserSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabelHitsQuality, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldHitsQuality, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelGenomeVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addComponent(jTextFieldBowtieIndex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxGenome, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldBowtieIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxAligner, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelHitsQuality, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelGenomeVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxGenome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldHitsQuality, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(insertSizeJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inserSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );

        jButtonBrowseIndex.getAccessibleContext().setAccessibleName("jButtonBrowseIndex");

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setToolTipText("");
        jPanel5.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 5));

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        startJButton.setText("Start Analysis");
        startJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startJButtonActionPerformed(evt);
            }
        });

        resetJButton.setText("Reset All");
        resetJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(startJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resetJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Chromosome Filtering", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Andale Mono", 0, 14))); // NOI18N

        chrMCheckBox.setSelected(true);
        chrMCheckBox.setText("chrM (recommended)");
        chrMCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chrMCheckBoxActionPerformed(evt);
            }
        });

        chrYCheckBox.setText("chr Y");
        chrYCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chrYCheckBoxActionPerformed(evt);
            }
        });

        ramJLabel.setText("RAM ( GB )");

        ramJSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        cpuJLabel.setText("CPU units");

        cpuJSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chrMCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chrYCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ramJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(ramJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cpuJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpuJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cpuJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cpuJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ramJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ramJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chrYCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chrMCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4))
        );

        macs2Japnel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Peak Calling and other parameters", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Andale Mono", 0, 14))); // NOI18N

        jLabel8.setText("Organism :");

        macs2PqvalueComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "q value", "p value" }));

        valueTextField.setText("0.05");
        valueTextField.setToolTipText("should be only numbers and 0 < num > 0.05");
        valueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueTextFieldActionPerformed(evt);
            }
        });
        valueTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                valueTextFieldKeyTyped(evt);
            }
        });

        outputDirJButton.setText("Output Folder");
        outputDirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputDirJButtonActionPerformed(evt);
            }
        });

        outputDirTextField.setEditable(false);
        outputDirTextField.setText("/path/output_dir");

        javax.swing.GroupLayout macs2JapnelLayout = new javax.swing.GroupLayout(macs2Japnel);
        macs2Japnel.setLayout(macs2JapnelLayout);
        macs2JapnelLayout.setHorizontalGroup(
            macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(macs2JapnelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(macs2JapnelLayout.createSequentialGroup()
                        .addComponent(macs2PqvalueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valueTextField))
                    .addComponent(outputDirJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(macs2JapnelLayout.createSequentialGroup()
                        .addGap(319, 319, 319)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelOrgName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(macs2JapnelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(outputDirTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );
        macs2JapnelLayout.setVerticalGroup(
            macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(macs2JapnelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(macs2PqvalueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(valueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelOrgName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addGroup(macs2JapnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputDirJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jPanelCutadapt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Adapter Trimming", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Andale Mono", 0, 13))); // NOI18N

        errorRatejLabel.setText("Error Rate");
        errorRatejLabel.setEnabled(false);

        maxNs.setEnabled(false);
        maxNs.setText("2");
        maxNs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maxNsKeyTyped(evt);
            }
        });

        adapterjLabel.setText("Adapter Sequence");
        adapterjLabel.setEnabled(false);

        maxNjLabel.setText("Maximum Ns ");
        maxNjLabel.setEnabled(false);

        minLenjLabel.setText("Minimum Read length");
        minLenjLabel.setEnabled(false);

        nextraAdapterCheckBox.setSelected(true);
        nextraAdapterCheckBox.setText("Nextera XT Adapter");
        nextraAdapterCheckBox.setEnabled(false);
        nextraAdapterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextraAdapterCheckBoxActionPerformed(evt);
            }
        });

        orjLabel.setText("OR");
        orjLabel.setEnabled(false);

        trimCheckBox.setSelected(false);
        trimCheckBox.setText("Trim adapter  ?");
        trimCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trimCheckBoxActionPerformed(evt);
            }
        });

        adapterSequenceTextfeild.setEnabled(false);
        adapterSequenceTextfeild.setText("");
        adapterSequenceTextfeild.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                adapterSequenceTextfeildKeyReleased(evt);
            }
        });

        errorRate.setEnabled(false);
        errorRate.setText("0.1");
        errorRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                errorRateKeyTyped(evt);
            }
        });

        minLen.setEnabled(false);
        minLen.setText("30");
        minLen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                minLenKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelCutadaptLayout = new javax.swing.GroupLayout(jPanelCutadapt);
        jPanelCutadapt.setLayout(jPanelCutadaptLayout);
        jPanelCutadaptLayout.setHorizontalGroup(
            jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCutadaptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCutadaptLayout.createSequentialGroup()
                        .addComponent(nextraAdapterCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(orjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(adapterjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(adapterSequenceTextfeild, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelCutadaptLayout.createSequentialGroup()
                        .addComponent(trimCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(maxNjLabel)
                        .addGap(0, 0, 0)
                        .addComponent(maxNs, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(minLenjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(minLen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(errorRatejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(errorRate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );
        jPanelCutadaptLayout.setVerticalGroup(
            jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCutadaptLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(trimCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maxNjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(maxNs, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorRate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minLen, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorRatejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minLenjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCutadaptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nextraAdapterCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(orjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(adapterjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(adapterSequenceTextfeild, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jMenu1.setText("Tools");

        jMenuItem3.setText("GUAVA");
        jMenuItem3.setEnabled(false);
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Differential Analysis");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);
        jMenu1.add(jSeparator1);

        jMenuItem5.setText("Close");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        mainframeJMenuBar.add(jMenu1);

        aboutJMenu.setText("About");

        jMenuItem1.setText("Prof. Edwin Cheung's lab,\nUniversity of Macau, All rights reserved");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        aboutJMenu.add(jMenuItem1);

        mainframeJMenuBar.add(aboutJMenu);

        helpJMenu.setText("Help");

        jMenuItem2.setText("Mannual");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        helpJMenu.add(jMenuItem2);

        mainframeJMenuBar.add(helpJMenu);

        setJMenuBar(mainframeJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelCutadapt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(macs2Japnel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelCutadapt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(macs2Japnel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(708, 580));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void r1JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r1JButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser r1FileChooser = new JFileChooser();
        r1FileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("Fastq File", "fastq","fq");
        r1FileChooser.addChoosableFileFilter(fileNameExtensionFilter);
        r1FileChooser.setDialogTitle("Select R1 Fastq");
        
        if(lastpath != null){
            r1FileChooser.setCurrentDirectory(lastpath);
        }        
        
        int returnVal = r1FileChooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            File r1File = r1FileChooser.getSelectedFile();
            String r1FileName = r1File.getAbsolutePath();
            r1FastqTextField.setText(r1FileName);
            runATACseq.setR1Fastq(r1FileName);
            r1FastqTextField.setForeground(Color.BLACK);
            lastpath = r1File.getParentFile();
        }
        
    }//GEN-LAST:event_r1JButtonActionPerformed

    private void r2JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r2JButtonActionPerformed
        JFileChooser r2FileChooser =  new JFileChooser();
        
        FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("Fastq File", "fastq","fq");
        r2FileChooser.setAcceptAllFileFilterUsed(false);
        r2FileChooser.addChoosableFileFilter(fileNameExtensionFilter);
        r2FileChooser.setDialogTitle("Select R2 Fastq");
        
        if(lastpath != null){
            r2FileChooser.setCurrentDirectory(lastpath);
        }
        
        int returnValue = r2FileChooser.showOpenDialog(null);
        if(returnValue == JFileChooser.APPROVE_OPTION){
            File r2File = r2FileChooser.getSelectedFile();
            String r2FileName = r2File.getAbsolutePath();
            r2FastqTextField.setText(r2FileName);
            runATACseq.setR2Fastq(r2FileName);
            r2FastqTextField.setForeground(Color.BLACK);
            lastpath =  r2File.getParentFile();
        }
    }//GEN-LAST:event_r2JButtonActionPerformed

    private void inserSizeTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inserSizeTextFieldKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)){
            evt.consume();
        }
        
        
    }//GEN-LAST:event_inserSizeTextFieldKeyTyped

    private void outputDirJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputDirJButtonActionPerformed
        JFileChooser outputDirChooser = new JFileChooser();
        outputDirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(lastpath != null){
            outputDirChooser.setCurrentDirectory(lastpath);
        }
        
        int returnVal = outputDirChooser.showOpenDialog(null);
        
        
        if(returnVal == JFileChooser.APPROVE_OPTION){
            File outputDir = outputDirChooser.getSelectedFile();
            String outputDirName = outputDir.getAbsolutePath();
            outputDirTextField.setText(outputDirName);
            runATACseq.setOutputFolder(outputDirName);
            outputDirTextField.setForeground(Color.BLACK);
            lastpath = outputDir.getParentFile();
        }
    }//GEN-LAST:event_outputDirJButtonActionPerformed

    private void resetJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJButtonActionPerformed
        r1FastqTextField.setText("/path/R1.fastq");
        r2FastqTextField.setText("/path/R2.fastq");
        jTextFieldBowtieIndex.setText("/path/bowtie1Index.ebwt");
        jComboBoxAligner.setSelectedIndex(0);
        jComboBoxGenome.setSelectedIndex(0);
        outputDirTextField.setText("/path/output_dir");
        inserSizeTextField.setText("2000");
        jLabelOrgName.setText("");
        macs2PqvalueComboBox.setSelectedIndex(0);
        chrYCheckBox.setSelected(false);
        chrMCheckBox.setSelected(true);
        jLabelOrgName.setText("");
        
        jTextFieldHitsQuality.setText("1");
        cpuJSpinner.setValue(1);
        valueTextField.setText("0.05");
        runATACseq = new GuavaInput();
        r1FastqTextField.setForeground(Color.black);
        r2FastqTextField.setForeground(Color.black);
        jTextFieldBowtieIndex.setForeground(Color.black);
        jLabelGenomeVersion.setForeground(Color.black);
        outputDirTextField.setForeground(Color.black);
        valueTextField.setForeground(Color.black);
        
        this.adapterSequenceTextfeild.setForeground(Color.BLACK);
        this.adapterSequenceTextfeild.setText("");
        this.adapterSequenceTextfeild.setEnabled(false);
        this.maxNs.setText("2");
        this.maxNs.setEnabled(false);
        this.maxNs.setForeground(Color.black);
        this.maxNjLabel.setEnabled(false);
        this.minLen.setText("30");
        this.minLen.setEnabled(false);
        this.minLen.setForeground(Color.black);
        this.minLenjLabel.setEnabled(false);
        this.errorRate.setText("0.1");
        this.errorRate.setEnabled(false);
        this.errorRatejLabel.setEnabled(false);
        this.errorRate.setForeground(Color.black);

        this.nextraAdapterCheckBox.setSelected(true);
        this.nextraAdapterCheckBox.setEnabled(false);
        this.trimCheckBox.setSelected(false);
        
    }//GEN-LAST:event_resetJButtonActionPerformed
   
    private void startJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startJButtonActionPerformed
        //complete Input object construction
        runATACseq.setBowtieIndex(jTextFieldBowtieIndex.getText());
        runATACseq.setCpu_units((int) cpuJSpinner.getValue());
        runATACseq.setMaxGenomicHits(Integer.parseInt(jTextFieldHitsQuality.getText()));
        runATACseq.setInsertSize(Integer.parseInt(inserSizeTextField.getText()));
        runATACseq.setOrganism(jLabelOrgName.getText());
        runATACseq.setPqString(macs2PqvalueComboBox.getSelectedItem().toString());
        runATACseq.setChromosome(getSelectedChromosomes());
        runATACseq.setCutOff(valueTextField.getText());
        runATACseq.setGenome(jComboBoxGenome.getSelectedItem().toString());
        runATACseq.setOrganism(jLabelOrgName.getText());

        boolean disposeFlag = validateInput(runATACseq);
        boolean isTrimValid = true;

        if(this.trimCheckBox.isSelected()){
            isTrimValid = this.validateTrimmingParameters();
            if(isTrimValid){
                runATACseq.setTrim(true);
                int nCount       = Integer.parseInt(this.maxNs.getText());
                int minLen       = Integer.parseInt(this.minLen.getText());
                double errorRate = Double.parseDouble(this.errorRate.getText());
                Cutadapt cutadapt = Cutadapt.getCutadapt(runATACseq,getAdapterSequence(),errorRate,nCount,minLen);
                runATACseq.setCutadapt(cutadapt);
            }
        }
                        
        if(isTrimValid && disposeFlag){
                IGV.genome = jComboBoxGenome.getSelectedItem().toString();
                this.setVisible(false);
                AnalysisWorkflow analysisWorkflow = new AnalysisWorkflow();
                analysisWorkflow.startGUIGuavaAnalysis(runATACseq);
        }
    }//GEN-LAST:event_startJButtonActionPerformed

    private String getAdapterSequence(){
        if(this.nextraAdapterCheckBox.isSelected()){
            return "CTGTCTCTTATACACATCT";
        }
        else{
            return this.adapterSequenceTextfeild.getText();
        }
    
    }
    
    private String getSelectedChromosomes(){
    
        if(chrMCheckBox.isSelected() && chrYCheckBox.isSelected()){
            return "chrM chrY";
        }
        else if (chrMCheckBox.isSelected()) {
            return "chrM";
        }
        else if (chrMCheckBox.isSelected()) {
            return "chrY";
        }
        else{
            return "";
        }

    
    }
    
    private boolean validateInput(GuavaInput runATACseq){
        Boolean disposeFlag = true;
        
        if(runATACseq.getR1Fastq() == null || !(runATACseq.getR1Fastq().exists())){
              disposeFlag = false;
              r1FastqTextField.setForeground(Color.red);
        }
        if(runATACseq.getR2Fastq() == null || !(runATACseq.getR2Fastq().exists())){
              disposeFlag = false;
              r2FastqTextField.setForeground(Color.red);
        }
        if (runATACseq.getBowtieIndex() == null || !(runATACseq.getBowtieIndex().exists())) {
              disposeFlag = false;
              jTextFieldBowtieIndex.setForeground(Color.red);
        }
        if (runATACseq.getGenome() == null || runATACseq.getGenome().equals("-select-")) {
              disposeFlag = false;
              jLabelGenomeVersion.setForeground(Color.red);
        }
        if (runATACseq.getOutputFolder() == null || !(runATACseq.getOutputFolder().exists())) {
              disposeFlag = false;  
              outputDirTextField.setForeground(Color.red);
        }
        if (valueTextField.getText().equals("") || ! runATACseq.getCutOff().equals("") ) {
            
            if(valueTextField.getText().equals("")){
                disposeFlag = false;
                valueTextField.setText("NULL");
                valueTextField.setForeground(Color.red);
                return disposeFlag;
            }
            
            try{
                Double.parseDouble(valueTextField.getText());
                valueTextField.setForeground(Color.BLACK);
            }
            catch(NumberFormatException e){
                disposeFlag = false;  
                valueTextField.setForeground(Color.red);
            }
                
        }
        
        return disposeFlag;
    }
    
    private boolean validateTrimmingParameters(){
        boolean validationflag = true;
        
        if(!nextraAdapterCheckBox.isSelected() && adapterSequenceTextfeild.getText().equals("")){
            adapterSequenceTextfeild.setText("Please provide adapter sequence");
            adapterSequenceTextfeild.setForeground(Color.red);
            validationflag = false;
        }
        
        if(!nextraAdapterCheckBox.isSelected() && !adapterSequenceTextfeild.getText().equals("")){
            String adapterSeq = adapterSequenceTextfeild.getText();
            Pattern nonNucleotideSeq = Pattern.compile("^[^ATGC]+$");
            Matcher matchNonNucleotide = nonNucleotideSeq.matcher(adapterSeq);
            if(matchNonNucleotide.find()){
                adapterSequenceTextfeild.setForeground(Color.red);
                validationflag = false;

            }
        }
        
        
        String minLen = this.minLen.getText();
        String maxN = this.maxNs.getText();
        String errorRate = this.errorRate.getText();
                
        if(!checkNumberFormat(minLen)){
            this.maxNs.setForeground(Color.red);
            validationflag = false;
        }
        if(!checkNumberFormat(maxN)){
            this.maxNs.setForeground(Color.red);
            validationflag = false;
        }
        if(!checkDoubleNumber(errorRate)){
            this.errorRate.setForeground(Color.red);
            validationflag = false;
        }
                           
     return validationflag;
    }
    
    
    private boolean checkDoubleNumber(String numberText){
        if(!numberText.equals("")){
            try {
                double doubleNumber = Double.parseDouble(numberText);
                double zero = 0.0;
                double one = 1.0;
                if( zero > doubleNumber || doubleNumber >= 0.5){
                    return false;
                }
            }
            catch(NumberFormatException e){
                return false;
            }
            
            return true;
        }
        return false;
    }
    
    private boolean checkNumberFormat(String numberText){
        if(!numberText.equals("")){
            try {
                int intNumber = Integer.parseInt(numberText);
                if(intNumber < 1){
                    return false;
                }
            }
            catch(NumberFormatException e){
                return false;
            }
            
            return true;
        }
        return false;
    }
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try{
            File jarFile = new File( MainJFrame.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath());
            File manual =  new File(jarFile.getParentFile().getAbsolutePath()+System.getProperty("file.separator")+"GUAVA_Manual.pdf");
            if(manual.exists()){
                if(Desktop.isDesktopSupported()){
                    Desktop.getDesktop().open(manual);
                }
                else{
                    System.out.println("Desktop is not supported");
                }
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void chrYCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chrYCheckBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_chrYCheckBoxActionPerformed

    private void chrMCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chrMCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chrMCheckBoxActionPerformed

    private void valueTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valueTextFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_valueTextFieldKeyTyped

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void valueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valueTextFieldActionPerformed

    private void jComboBoxGenomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxGenomeActionPerformed
        // TODO add your handling code here:
        jLabelGenomeVersion.setForeground(Color.black);
        if(jComboBoxGenome.getSelectedIndex() == 0){
            jLabelOrgName.setText("");
        }
        else if(jComboBoxGenome.getSelectedIndex() == 1){
            jLabelOrgName.setText("Human");
        }
        if(jComboBoxGenome.getSelectedIndex() == 2 || jComboBoxGenome.getSelectedIndex() == 3){
            jLabelOrgName.setText("Mouse");
        }
        
    }//GEN-LAST:event_jComboBoxGenomeActionPerformed

    private void nextraAdapterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextraAdapterCheckBoxActionPerformed
        // TODO add your handling code here:
        if(nextraAdapterCheckBox.isSelected()){
            adapterSequenceTextfeild.setEnabled(false);
            adapterjLabel.setEnabled(false);
        }
        if(!nextraAdapterCheckBox.isSelected()){
            adapterSequenceTextfeild.setEnabled(true);
            adapterjLabel.setEnabled(true);
        }
        
    }//GEN-LAST:event_nextraAdapterCheckBoxActionPerformed

    private void trimCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trimCheckBoxActionPerformed
        // TODO add your handling code here:
        if(trimCheckBox.isSelected()){
            maxNs.setEnabled(true);
            maxNjLabel.setEnabled(true);
            minLen.setEnabled(true);
            minLenjLabel.setEnabled(true);
            errorRate.setEnabled(true);
            errorRatejLabel.setEnabled(true);
            nextraAdapterCheckBox.setEnabled(true);
            orjLabel.setEnabled(true);
            if(nextraAdapterCheckBox.isSelected()){
                adapterSequenceTextfeild.setEnabled(false);
                adapterjLabel.setEnabled(false);
            }
            else if (!nextraAdapterCheckBox.isSelected()){
                adapterSequenceTextfeild.setEnabled(true);
                adapterjLabel.setEnabled(true);                
            }
            
            
        }
        if(!trimCheckBox.isSelected()){
            maxNs.setEnabled(false);
            maxNjLabel.setEnabled(false);
            minLen.setEnabled(false);
            minLenjLabel.setEnabled(false);
            errorRate.setEnabled(false);
            errorRatejLabel.setEnabled(false);
            nextraAdapterCheckBox.setEnabled(false);
            adapterSequenceTextfeild.setEnabled(false);
            adapterjLabel.setEnabled(false);
            orjLabel.setEnabled(false);
            
        }
        
    }//GEN-LAST:event_trimCheckBoxActionPerformed

    private void minLenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minLenKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if(!(Character.isDigit(key))){
            evt.consume();
        }
    }//GEN-LAST:event_minLenKeyTyped

    private void maxNsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxNsKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if(!(Character.isDigit(key))){
            evt.consume();
        }
    }//GEN-LAST:event_maxNsKeyTyped

    private void errorRateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_errorRateKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if(!(Character.isDigit(key) || key == '.')){
            evt.consume();
        }
    }//GEN-LAST:event_errorRateKeyTyped

    private void jTextFieldBowtieIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBowtieIndexActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldBowtieIndexActionPerformed

    private void adapterSequenceTextfeildKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_adapterSequenceTextfeildKeyReleased
        // TODO add your handling code here:
            adapterSequenceTextfeild.setText(adapterSequenceTextfeild.getText().toUpperCase());
        
    }//GEN-LAST:event_adapterSequenceTextfeildKeyReleased

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        DifferentialInputFrame1 dfInputFrame = new DifferentialInputFrame1();
        dfInputFrame.setVisible(true);
        
        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void inserSizeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserSizeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inserSizeTextFieldActionPerformed

    private void jComboBoxAlignerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAlignerActionPerformed
        // TODO add your handling code here:
        if(jComboBoxAligner.getSelectedIndex() == 0){
                jLabelHitsQuality.setText("No. of genomic hits (m)");
                jTextFieldHitsQuality.setText("1");
                jTextFieldBowtieIndex.setText("/path/bowtie1index.ebwt");
                AnalysisWorkflow.bowtie = true;
                
        }
        else{
                jLabelHitsQuality.setText("Minimum Mapping Quality");
                jTextFieldHitsQuality.setText("10");
                jTextFieldBowtieIndex.setText("/path/bowtie1index.bt2");
                AnalysisWorkflow.bowtie = false;
        }   
    }//GEN-LAST:event_jComboBoxAlignerActionPerformed

    private void jTextFieldHitsQualityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldHitsQualityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldHitsQualityActionPerformed

    private void jTextFieldHitsQualityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldHitsQualityKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!Character.isDigit(c)){
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldHitsQualityKeyTyped

    private void jButtonBrowseIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseIndexActionPerformed

        if(jComboBoxAligner.getSelectedIndex() == 0){
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setAcceptAllFileFilterUsed(false);
                FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("bowtie v1 index", "ebwt");
                fileChooser.addChoosableFileFilter(fileNameExtensionFilter);
                fileChooser.setDialogTitle("Select Bowtie v1 index");

                if(lastpath != null){
                    fileChooser.setCurrentDirectory(lastpath);
                }        

                int returnVal = fileChooser.showOpenDialog(null);
                if(returnVal == JFileChooser.APPROVE_OPTION){
                    File file = fileChooser.getSelectedFile();
                    String fileName = file.getAbsolutePath();
                    jTextFieldBowtieIndex.setText(fileName);
                    jTextFieldBowtieIndex.setForeground(Color.BLACK);
                    lastpath = file.getParentFile();
                }
        }

        else if(jComboBoxAligner.getSelectedIndex() == 1){
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setAcceptAllFileFilterUsed(false);
                FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter("bowtie2 index", "bt2");
                fileChooser.addChoosableFileFilter(fileNameExtensionFilter);
                fileChooser.setDialogTitle("Select Bowtie2ss index");

                if(lastpath != null){
                    fileChooser.setCurrentDirectory(lastpath);
                }        

                int returnVal = fileChooser.showOpenDialog(null);
                if(returnVal == JFileChooser.APPROVE_OPTION){
                    File file = fileChooser.getSelectedFile();
                    String fileName = file.getAbsolutePath();
                    jTextFieldBowtieIndex.setText(fileName);
                    jTextFieldBowtieIndex.setForeground(Color.BLACK);
                    lastpath = file.getParentFile();
                }
        }


        
        
        
    }//GEN-LAST:event_jButtonBrowseIndexActionPerformed

    private File lastpath;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutJMenu;
    private java.awt.TextField adapterSequenceTextfeild;
    private javax.swing.JLabel adapterjLabel;
    private javax.swing.JCheckBox chrMCheckBox;
    private javax.swing.JCheckBox chrYCheckBox;
    private javax.swing.JLabel cpuJLabel;
    private javax.swing.JSpinner cpuJSpinner;
    private java.awt.TextField errorRate;
    private javax.swing.JLabel errorRatejLabel;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JTextField inserSizeTextField;
    private javax.swing.JLabel insertSizeJLabel;
    private javax.swing.JButton jButtonBrowseIndex;
    private javax.swing.JComboBox<String> jComboBoxAligner;
    private javax.swing.JComboBox<String> jComboBoxGenome;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelGenomeVersion;
    private javax.swing.JLabel jLabelHitsQuality;
    private javax.swing.JLabel jLabelOrgName;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanelCutadapt;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private java.awt.TextField jTextFieldBowtieIndex;
    private javax.swing.JTextField jTextFieldHitsQuality;
    private javax.swing.JPanel macs2Japnel;
    private javax.swing.JComboBox<String> macs2PqvalueComboBox;
    private javax.swing.JMenuBar mainframeJMenuBar;
    private javax.swing.JLabel maxNjLabel;
    private java.awt.TextField maxNs;
    private java.awt.TextField minLen;
    private javax.swing.JLabel minLenjLabel;
    private javax.swing.JCheckBox nextraAdapterCheckBox;
    private javax.swing.JLabel orjLabel;
    private javax.swing.JButton outputDirJButton;
    private java.awt.TextField outputDirTextField;
    private java.awt.TextField r1FastqTextField;
    private javax.swing.JButton r1JButton;
    private java.awt.TextField r2FastqTextField;
    private javax.swing.JButton r2JButton;
    private javax.swing.JLabel ramJLabel;
    private javax.swing.JSpinner ramJSpinner;
    private javax.swing.JButton resetJButton;
    private javax.swing.JButton startJButton;
    private javax.swing.JCheckBox trimCheckBox;
    private javax.swing.JTextField valueTextField;
    // End of variables declaration//GEN-END:variables
}

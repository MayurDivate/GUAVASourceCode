/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package umac.guava;

import java.awt.Desktop;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author mayurdivate
 */
public class RunStatusJframe extends javax.swing.JFrame {

    /**
     * Creates new form RunStatusJframe
     */
    
    public static ArrayList<PeakTable> peakTableList;
    private int totalReads;   
    
    public RunStatusJframe() {
        initComponents();
    }
    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        resultTabs = new javax.swing.JTabbedPane();
        alignStatJPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        alignmentStatTable = new javax.swing.JTable();
        alignmentFilteringJPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        alignFilterStatTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        peakCallingResultTable = new javax.swing.JTable();
        graphJPanel = new javax.swing.JPanel();
        graphJLabel = new javax.swing.JLabel();
        jPanelPeaks = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePeaks = new javax.swing.JTable();
        jPanelBarChart = new javax.swing.JPanel();
        jLabelACRbarChart = new javax.swing.JLabel();
        jScrollPaneGO = new javax.swing.JScrollPane();
        jTableGO = new javax.swing.JTable();
        jScrollPanePathway = new javax.swing.JScrollPane();
        jTablePathways = new javax.swing.JTable();
        doneCancelJPanel = new javax.swing.JPanel();
        closeJButton = new javax.swing.JButton();
        outputDirJButton = new javax.swing.JButton();
        jTextFieldSearch = new javax.swing.JTextField();
        jLabelGeneFilter = new javax.swing.JLabel();
        jButtonIGV = new javax.swing.JButton();
        runstatusJMenuBar = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemAboutUs = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        resultTabs.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.gray, java.awt.Color.gray));
        resultTabs.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        resultTabs.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        resultTabs.setPreferredSize(new java.awt.Dimension(658, 431));
        resultTabs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTabsMouseClicked(evt);
            }
        });

        alignStatJPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.lightGray));

        alignmentStatTable.setFont(new java.awt.Font("Menlo", 0, 12)); // NOI18N
        alignmentStatTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parameter", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        alignmentStatTable.setRowHeight(30);
        alignmentStatTable.setRowMargin(2);
        alignmentStatTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        alignmentStatTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(alignmentStatTable);
        if (alignmentStatTable.getColumnModel().getColumnCount() > 0) {
            alignmentStatTable.getColumnModel().getColumn(0).setResizable(false);
            alignmentStatTable.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout alignStatJPanelLayout = new javax.swing.GroupLayout(alignStatJPanel);
        alignStatJPanel.setLayout(alignStatJPanelLayout);
        alignStatJPanelLayout.setHorizontalGroup(
            alignStatJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignStatJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
                .addContainerGap())
        );
        alignStatJPanelLayout.setVerticalGroup(
            alignStatJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignStatJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE))
        );

        resultTabs.addTab("Alignment Statistics", alignStatJPanel);

        alignmentFilteringJPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.lightGray));

        alignFilterStatTable.setFont(new java.awt.Font("Menlo", 0, 12)); // NOI18N
        alignFilterStatTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Parameter", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        alignFilterStatTable.setRowHeight(30);
        alignFilterStatTable.setRowMargin(2);
        alignFilterStatTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(alignFilterStatTable);
        if (alignFilterStatTable.getColumnModel().getColumnCount() > 0) {
            alignFilterStatTable.getColumnModel().getColumn(0).setResizable(false);
            alignFilterStatTable.getColumnModel().getColumn(1).setResizable(false);
        }

        peakCallingResultTable.setFont(new java.awt.Font("Menlo", 0, 12)); // NOI18N
        peakCallingResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Peak Calling Results", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        peakCallingResultTable.setRowHeight(30);
        peakCallingResultTable.setRowMargin(2);
        peakCallingResultTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(peakCallingResultTable);
        if (peakCallingResultTable.getColumnModel().getColumnCount() > 0) {
            peakCallingResultTable.getColumnModel().getColumn(0).setResizable(false);
            peakCallingResultTable.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout alignmentFilteringJPanelLayout = new javax.swing.GroupLayout(alignmentFilteringJPanel);
        alignmentFilteringJPanel.setLayout(alignmentFilteringJPanelLayout);
        alignmentFilteringJPanelLayout.setHorizontalGroup(
            alignmentFilteringJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignmentFilteringJPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
                .addGap(6, 6, 6))
            .addGroup(alignmentFilteringJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
                .addContainerGap())
        );
        alignmentFilteringJPanelLayout.setVerticalGroup(
            alignmentFilteringJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignmentFilteringJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );

        resultTabs.addTab("Alignment Filtering", alignmentFilteringJPanel);

        graphJPanel.setBackground(new java.awt.Color(255, 255, 255));
        graphJPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.lightGray));
        graphJPanel.setPreferredSize(new java.awt.Dimension(778, 452));

        graphJLabel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout graphJPanelLayout = new javax.swing.GroupLayout(graphJPanel);
        graphJPanel.setLayout(graphJPanelLayout);
        graphJPanelLayout.setHorizontalGroup(
            graphJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphJPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(graphJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        graphJPanelLayout.setVerticalGroup(
            graphJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(graphJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addContainerGap())
        );

        resultTabs.addTab("Fragment Size Distribution", graphJPanel);

        jPanelPeaks.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.lightGray));

        jTablePeaks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Chr", "Start", "End", "Length", "Pileup Height", "-log10(p)", "-log10(q)", "Annotation", "DistanceToTSS", "Gene Symbol"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePeaks.setToolTipText("");
        jTablePeaks.setGridColor(new java.awt.Color(153, 153, 153));
        jTablePeaks.setShowGrid(true);
        jTablePeaks.getTableHeader().setReorderingAllowed(false);
        jTablePeaks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTablePeaksMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTablePeaks);

        javax.swing.GroupLayout jPanelPeaksLayout = new javax.swing.GroupLayout(jPanelPeaks);
        jPanelPeaks.setLayout(jPanelPeaksLayout);
        jPanelPeaksLayout.setHorizontalGroup(
            jPanelPeaksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
        );
        jPanelPeaksLayout.setVerticalGroup(
            jPanelPeaksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
        );

        resultTabs.addTab("Annotated Peaks", jPanelPeaks);

        jPanelBarChart.setBackground(new java.awt.Color(255, 255, 255));
        jPanelBarChart.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.lightGray));

        jLabelACRbarChart.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanelBarChartLayout = new javax.swing.GroupLayout(jPanelBarChart);
        jPanelBarChart.setLayout(jPanelBarChartLayout);
        jPanelBarChartLayout.setHorizontalGroup(
            jPanelBarChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBarChartLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabelACRbarChart, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        jPanelBarChartLayout.setVerticalGroup(
            jPanelBarChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBarChartLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelACRbarChart, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addContainerGap())
        );

        resultTabs.addTab("Plot", jPanelBarChart);

        jTableGO.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.lightGray));
        jTableGO.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GO ID", "GO Term", "Type", "P value", "adj. P value", "Gene Symbols"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableGO.setGridColor(new java.awt.Color(153, 153, 153));
        jTableGO.setShowGrid(true);
        jTableGO.getTableHeader().setReorderingAllowed(false);
        jScrollPaneGO.setViewportView(jTableGO);
        if (jTableGO.getColumnModel().getColumnCount() > 0) {
            jTableGO.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTableGO.getColumnModel().getColumn(0).setMaxWidth(100);
            jTableGO.getColumnModel().getColumn(2).setPreferredWidth(50);
            jTableGO.getColumnModel().getColumn(2).setMaxWidth(50);
            jTableGO.getColumnModel().getColumn(3).setPreferredWidth(80);
            jTableGO.getColumnModel().getColumn(3).setMaxWidth(80);
            jTableGO.getColumnModel().getColumn(4).setPreferredWidth(80);
            jTableGO.getColumnModel().getColumn(4).setMaxWidth(80);
        }

        resultTabs.addTab("Gene Ontologies", jScrollPaneGO);

        jTablePathways.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.lightGray));
        jTablePathways.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "KEGG ID", "Pathway Name", "P value", "adj. P value", "Gene Symbols"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePathways.setGridColor(new java.awt.Color(153, 153, 153));
        jTablePathways.setShowGrid(true);
        jScrollPanePathway.setViewportView(jTablePathways);
        if (jTablePathways.getColumnModel().getColumnCount() > 0) {
            jTablePathways.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTablePathways.getColumnModel().getColumn(0).setMaxWidth(100);
            jTablePathways.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTablePathways.getColumnModel().getColumn(2).setMaxWidth(80);
            jTablePathways.getColumnModel().getColumn(3).setPreferredWidth(80);
            jTablePathways.getColumnModel().getColumn(3).setMaxWidth(80);
        }

        resultTabs.addTab("Pathways", jScrollPanePathway);

        closeJButton.setText("close");
        closeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeJButtonActionPerformed(evt);
            }
        });

        outputDirJButton.setText("Output Folder");
        outputDirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputDirJButtonActionPerformed(evt);
            }
        });

        jTextFieldSearch.setEditable(false);
        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyReleased(evt);
            }
        });

        jLabelGeneFilter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelGeneFilter.setText("Gene Name");

        jButtonIGV.setText("View in IGV");
        jButtonIGV.setEnabled(false);
        jButtonIGV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIGVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout doneCancelJPanelLayout = new javax.swing.GroupLayout(doneCancelJPanel);
        doneCancelJPanel.setLayout(doneCancelJPanelLayout);
        doneCancelJPanelLayout.setHorizontalGroup(
            doneCancelJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doneCancelJPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(outputDirJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelGeneFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonIGV, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(closeJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        doneCancelJPanelLayout.setVerticalGroup(
            doneCancelJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doneCancelJPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(doneCancelJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputDirJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelGeneFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonIGV, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextFieldSearch.setVisible(false);
        jLabelGeneFilter.setVisible(false);
        jButtonIGV.setVisible(false);

        jMenu2.setText("Tools");

        jMenu3.setText("DFAC");
        jMenu2.add(jMenu3);

        runstatusJMenuBar.add(jMenu2);

        jMenu1.setText("About");

        jMenuItemAboutUs.setText("Prof. Edwin Cheung's lab,\nUniversity of Macau, All rights reserved");
        jMenu1.add(jMenuItemAboutUs);

        runstatusJMenuBar.add(jMenu1);

        jMenuHelp.setText("Help");
        jMenuHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHelpActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Manual");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItem1);

        runstatusJMenuBar.add(jMenuHelp);

        setJMenuBar(runstatusJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(resultTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 803, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doneCancelJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(doneCancelJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    void displayFragmentSizeGraph(){
        ImageIcon imageIcon  = new ImageIcon(R.fragmentSizeDistributionPlot.getAbsolutePath());
        graphJLabel.setIcon(imageIcon);
        graphJLabel.setAlignmentY(JLabel.CENTER_ALIGNMENT);
    }

    public void displayACRbarChart(File barChart){
        ImageIcon imageIconChart  = new ImageIcon(barChart.getAbsolutePath());
        jLabelACRbarChart.setIcon(imageIconChart);
        jLabelACRbarChart.setAlignmentY(JLabel.CENTER_ALIGNMENT);
    }
    
    private void closeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeJButtonActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_closeJButtonActionPerformed

    private void outputDirJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputDirJButtonActionPerformed
        try {
            Desktop desktop = Desktop.getDesktop();
            desktop.open(GuavaOutputFiles.rootDir.getAbsoluteFile());
        } catch (IOException ex) {
            Logger.getLogger(RunStatusJframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_outputDirJButtonActionPerformed

    private void jMenuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHelpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuHelpActionPerformed

    private void jTextFieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyReleased
        // TODO add your handling code here:
        jButtonIGV.setEnabled(false);
        
        if(resultTabs.getSelectedIndex() == 3){
            String query =  jTextFieldSearch.getText().trim();
            filterTableEntries(query);
        }
        
        
    }//GEN-LAST:event_jTextFieldSearchKeyReleased

    private void jButtonIGVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIGVActionPerformed
        // TODO add your handling code here:
        if(jTablePeaks.getSelectedRow() > -1){
 
            int rowIndex = jTablePeaks.convertRowIndexToModel(jTablePeaks.getSelectedRow());
            TableModel tableModel = jTablePeaks.getModel();
            
            String chr = tableModel.getValueAt(rowIndex, 0).toString();
            int start = Integer.parseInt(tableModel.getValueAt(rowIndex, 1).toString());
            int end = Integer.parseInt(tableModel.getValueAt(rowIndex, 2).toString());
            int distance = Integer.parseInt(tableModel.getValueAt(rowIndex, 8).toString());
            File[] tracks =  IGV.getIGVTracks();
            IGV igv =  new IGV(tracks, chr, start, end, distance);

            Thread t1 = new Thread(igv);
            t1.start();
            
        }
        
        jButtonIGV.setEnabled(false);
    }//GEN-LAST:event_jButtonIGVActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        try{
            File manual =  new File(GUAVA.getPackageBase(),"GUAVA_Manual.pdf");
            if(manual.exists()){
                if(Desktop.isDesktopSupported()){
                    Desktop.getDesktop().open(manual);
                }
                else{
                    System.out.println("Desktop is not supported");
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(RunStatusJframe.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void resultTabsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTabsMouseClicked
        // TODO add your handling code here:

        // annotated peaks tab
        if(resultTabs.getSelectedIndex() == 3){
            jTextFieldSearch.setVisible(true);
            jTextFieldSearch.setEditable(true);
            jLabelGeneFilter.setVisible(true);
            jLabelGeneFilter.setText("Gene Name");
            jButtonIGV.setVisible(true);
        }
        
        else{
            jTextFieldSearch.setVisible(false);
            jTextFieldSearch.setEditable(false);
            jLabelGeneFilter.setVisible(false);
            jButtonIGV.setVisible(false);
        }

    }//GEN-LAST:event_resultTabsMouseClicked

    private void jTablePeaksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePeaksMouseReleased
        // TODO add your handling code here:
        jButtonIGV.setEnabled(true);

    }//GEN-LAST:event_jTablePeaksMouseReleased

    void setPeakCallingResult(GuavaInput atacseq, int peakCount){
       peakCallingResultTable.setValueAt(atacseq.getPqString()+" value cut off ", 0, 0);
       peakCallingResultTable.setValueAt(atacseq.getCutOff(), 0, 1);
       peakCallingResultTable.setValueAt("Total Number of Peaks", 1, 0);
       peakCallingResultTable.setValueAt(peakCount, 1, 1);
       
    }
    
    void fillAlignmentTable(GuavaInput atacseqInput, boolean bowtie){
        DefaultTableModel alignmentTableDFModel =  (DefaultTableModel) alignmentStatTable.getModel();
        
        String[] rowData = {"R1 fastq",atacseqInput.getR1Fastq().getName()};
        alignmentTableDFModel.addRow(rowData);
        
        rowData[0] = "R2 fastq";
        rowData[1] = atacseqInput.getR2Fastq().getName();
        alignmentTableDFModel.addRow(rowData);


        rowData[0] = "Genome index";
        rowData[1] = atacseqInput.getbowtieIndexString().replaceAll(".*\\/", "");
        alignmentTableDFModel.addRow(rowData);

        rowData[0] = "Maximum Insert Size";
        rowData[1] = ""+atacseqInput.getInsertSize();
        alignmentTableDFModel.addRow(rowData);


        if(bowtie){
            rowData[0] = "Maximum genomic hits";
            rowData[1] = ""+atacseqInput.getMaxGenomicHits();
            alignmentTableDFModel.addRow(rowData);
        }
        else{
            rowData[0] = "Minimum Mapping Quality";
            rowData[1] = ""+atacseqInput.getMapQ();
            alignmentTableDFModel.addRow(rowData);
        }
        
    }
    
    void displayAlignmentResults(AlignmentResult alignmentResults, boolean bowtie){
        
        DefaultTableModel alignmentTableDFModel =  (DefaultTableModel) alignmentStatTable.getModel();
        totalReads = alignmentResults.getTotalReads();
        
        String[] rowData =  new String[2];
        rowData[0] = "Total Reads";
        rowData[1] = ""+totalReads;
        alignmentTableDFModel.addRow(rowData);
            
        rowData[0] = "Total Aligned Reads";
        rowData[1] = alignmentResults.getReadsAligned()+" ("+alignmentResults.getReadsAligned_pc()+"%)";
        alignmentTableDFModel.addRow(rowData);
           
        rowData[0] = "Total Reads Failed to Align";
        rowData[1] = alignmentResults.getReadsUnaligned()+" ("+alignmentResults.getReadsUnaligned_pc()+"%)";
        alignmentTableDFModel.addRow(rowData);
           
        if(bowtie){
            rowData[0] = "Total Suppressed Reads";
        } else {
            rowData[0] = "Total Reads with Low Mapping Quality";
        }

        rowData[1] = alignmentResults.getReadsSuppressed()+" ("+alignmentResults.getReadsSuppressed_pc()+"%)";
        alignmentTableDFModel.addRow(rowData);
           
           alignFilterStatTable.setValueAt("Total Reads", 0, 0);
           alignFilterStatTable.setValueAt(alignmentResults.getTotalReads(), 0, 1);

           alignFilterStatTable.setValueAt("Total Aligned Reads", 1, 0);
           alignFilterStatTable.setValueAt(alignmentResults.getReadsAligned()+" ("+alignmentResults.getReadsAligned_pc()+"%)", 1, 1);
    }

    void setChrStat(HashMap<String, Integer> chrSTAT, String chrString){
        DefaultTableModel alignmentTableDFModel =  (DefaultTableModel) alignmentStatTable.getModel();

        String[] chrs = chrString.trim().split("\\s");
        
        for(String chromosome : chrs){
            Object[] rowData = new Object[2];
            if(chrSTAT.containsKey(chromosome)){
               rowData[0] = "Total "+chromosome+" Reads";
                
                int readCount = chrSTAT.get(chromosome);
                readCount = readCount / 2;
                
                double pc  = AlignmentResult.getPercentage(readCount,totalReads );
                rowData[1] = readCount+" ("+pc+"%)";
                alignmentTableDFModel.addRow(rowData);
            }
            else if(!chromosome.equals("")){
               rowData[0] = "Total "+chromosome+" Reads";
               rowData[1] = 0;
               alignmentTableDFModel.addRow(rowData);
            }
        }
    }
    
    void setFilteredResults(FilteredAlignment afRes){
        
        int dupReads = afRes.getTotalAligned() - afRes.getDuplicateFilteredReads();
        int chrReads = afRes.getDuplicateFilteredReads() - afRes.getChromosomeFilteredReads();
        int blacklistReads = afRes.getDuplicateFilteredReads() - ( afRes.getBlacklistFilteredReads() + chrReads );

        double dup_pc = afRes.getPercentage(dupReads, afRes.getTotalReads()); 
        double chr_pc = afRes.getPercentage(chrReads, afRes.getTotalReads()); 
        double blist_pc = afRes.getPercentage(blacklistReads, afRes.getTotalReads()); 
        double useful_pc = afRes.getPercentage(afRes.getUsefulReads() , afRes.getTotalReads()); 
        
        
        alignFilterStatTable.setValueAt("Total Duplicate Reads", 2, 0);
        alignFilterStatTable.setValueAt(dupReads+" ("+dup_pc+"%)", 2, 1);

        alignFilterStatTable.setValueAt("Chr* Reads after duplicate filtering", 3, 0);
        alignFilterStatTable.setValueAt(chrReads+" ("+chr_pc +"%)", 3, 1);

        alignFilterStatTable.setValueAt("Blacklist Region Reads", 4, 0);
        alignFilterStatTable.setValueAt(blacklistReads+" ("+blist_pc +"%)", 4, 1);

        alignFilterStatTable.setValueAt("Total Useful Reads", 5, 0);
        alignFilterStatTable.setValueAt(afRes.getUsefulReads() +" ("+useful_pc +"%)", 5, 1);

        
    }
    
    public void addPeakTableRow(File geneAnnotationFile){
        
        DefaultTableModel dfModel =  (DefaultTableModel) jTablePeaks.getModel();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<DefaultTableModel>(dfModel);
        jTablePeaks.setRowSorter(tableRowSorter);

        RunStatusJframe.peakTableList =  PeakTable.getPeakList(geneAnnotationFile);
        
        Object rowData[] = new Object[jTablePeaks.getColumnCount()];
        
        for(PeakTable peak : peakTableList){
            rowData[0] = peak.getChromosome();
            rowData[1] = peak.getStart();
            rowData[2] = peak.getEnd();
            rowData[3] = peak.getLength();
            rowData[4] = peak.getPileupHeight();
            rowData[5] = peak.getPvalue();
            rowData[6] = peak.getQvalue();
            rowData[7] = peak.getAnnotation();
            rowData[8] = peak.getDistanceToTSS();
            rowData[9] = peak.getGeneSymbol();
            dfModel.addRow(rowData);
        }
        
    }

    private void filterTableEntries(String query){
        
        int geneColumnIndex = 9;
        
        // ANNOTATION TABLE
        DefaultTableModel dfModel =  (DefaultTableModel) jTablePeaks.getModel();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<DefaultTableModel>(dfModel);
        jTablePeaks.setRowSorter(tableRowSorter);
        
        tableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)"+query, geneColumnIndex));
        
        // GO TABLE
        geneColumnIndex = 5;
        
        DefaultTableModel dfModelGO =  (DefaultTableModel) jTableGO.getModel();
        TableRowSorter<DefaultTableModel> tableRowSorterGO = new TableRowSorter<DefaultTableModel>(dfModelGO);
        jTableGO.setRowSorter(tableRowSorterGO);
        
        tableRowSorterGO.setRowFilter(RowFilter.regexFilter("(?i)"+query, geneColumnIndex));
        
        
        // Pathway TABLE
        geneColumnIndex = 4;
        
        DefaultTableModel dfModelPathway =  (DefaultTableModel) jTableGO.getModel();
        TableRowSorter<DefaultTableModel> tableRowSorterPathway = new TableRowSorter<DefaultTableModel>(dfModelPathway);
        jTableGO.setRowSorter(tableRowSorterPathway);
        
        tableRowSorterPathway.setRowFilter(RowFilter.regexFilter("(?i)"+query, geneColumnIndex));
        
        
    }

    public void addGoTableRows(File geneAnnotationFile){
        
        DefaultTableModel dfModel =  (DefaultTableModel) jTableGO.getModel();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<DefaultTableModel>(dfModel);
        jTableGO.setRowSorter(tableRowSorter);
        
        HashMap<GeneOntology, GeneOntology> goHashMap =  GeneOntology.parseGOAnalysisOutputFile(geneAnnotationFile);
        
        Object rowData[] = new Object[jTableGO.getColumnCount()];
        
        for(GeneOntology go : goHashMap.keySet() ){
            rowData[0] = go.getGoID();
            rowData[1] = go.getGoTerm();
            rowData[2] = go.getGoCategory();
            NumberFormat formatter = new DecimalFormat("0.00E00");
            rowData[3] = formatter.format(go.getPvalue());
            rowData[4] = formatter.format(go.getAdjustedPvalue());
            rowData[5] = go.getGeneSymbols();
            dfModel.addRow(rowData);
        }
        
    }
    
    public void addPathwayTableRows(File geneAnnotationFile){
        
        DefaultTableModel dfModel =  (DefaultTableModel) jTablePathways.getModel();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<DefaultTableModel>(dfModel);
        jTablePathways.setRowSorter(tableRowSorter);
        
        HashMap<Pathway, Pathway> goHashMap =  Pathway.parsePathwayAnalysisOutputFile(geneAnnotationFile);
        
        Object rowData[] = new Object[jTablePathways.getColumnCount()];
        
        for(Pathway pathway : goHashMap.keySet() ){
            rowData[0] = pathway.getKeggID();
            rowData[1] = pathway.getPathwayname();
            NumberFormat formatter = new DecimalFormat("0.00E00");
            rowData[2] = formatter.format(pathway.getPvalue());
            rowData[3] = formatter.format(pathway.getAdjPvalue());
            rowData[4] = pathway.getGeneSymbol();
            dfModel.addRow(rowData);
        }
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable alignFilterStatTable;
    private javax.swing.JPanel alignStatJPanel;
    private javax.swing.JPanel alignmentFilteringJPanel;
    private javax.swing.JTable alignmentStatTable;
    private javax.swing.JButton closeJButton;
    private javax.swing.JPanel doneCancelJPanel;
    private javax.swing.JLabel graphJLabel;
    private javax.swing.JPanel graphJPanel;
    private javax.swing.JButton jButtonIGV;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabelACRbarChart;
    private javax.swing.JLabel jLabelGeneFilter;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemAboutUs;
    private javax.swing.JPanel jPanelBarChart;
    private javax.swing.JPanel jPanelPeaks;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPaneGO;
    private javax.swing.JScrollPane jScrollPanePathway;
    private javax.swing.JTable jTableGO;
    private javax.swing.JTable jTablePathways;
    private javax.swing.JTable jTablePeaks;
    private javax.swing.JTextField jTextFieldSearch;
    private javax.swing.JButton outputDirJButton;
    private javax.swing.JTable peakCallingResultTable;
    private javax.swing.JTabbedPane resultTabs;
    private javax.swing.JMenuBar runstatusJMenuBar;
    // End of variables declaration//GEN-END:variables
}
